[[div style="display:none;"]]
[[module ListPages fullname="@URL" category="*" limit="1"]] 
[[%%content{0}%%html]]
<div id="autohor">
%%created_by%%
</div>
<div id="title">
%%title%%
</div>
<div id="fullname">
http://scp-jp.wikidot.com/%%fullname%%
</div>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/2"></script>
<script type="text/javascript">
function getJPSCP(){
    var author = document.getElementById("autohor").innerHTML.split("[[[*user ").join("").split("]]]").join("").split("\n").join("");
    var title = document.getElementById("title").innerHTML.split("\n").join("");
    var fullname = document.getElementById("fullname").innerHTML.split("\n").join("");
    if((author.length + title.length) > 0){
    	author = convertExceptionAuthor(author,title);
    	return"Author: "+author+ ResultWrap+"Title: "+ title+ResultWrap+"Source: "+ 
    	'<a target="_blank" href="' + fullname + '">' + fullname + "</a>" + ResultWrap+"CC BY-SA 3.0"+ResultWrap;
    }
}

// 特殊条件の作者名を出力する
function convertExceptionAuthor(author,title){
    var resultAuthor = author;
    // 特殊作者リスト
    var ExceptionList = {
    	'SCP-003-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-011-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-029-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-033-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-046-JP':{
    		Author:'C-take',
    		Origin:'broken_bone'
    	},
    	'SCP-060-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-070-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-073-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-315-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-492-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-717-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-1436-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-1945-JP':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'SCP-0833-JP-J':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	},
    	'broken_boneの提言':{
    		Author:'jet0620',
    		Origin:'broken_bone'
    	}
    }
    if(title in ExceptionList){
    	if(author == ExceptionList[title].Author){
    		resultAuthor = ExceptionList[title].Origin;
    	}
    }
    return resultAuthor;
}
</script>
[[/html]]
[[%%content{0}%%embed]]
<iframe name="isJPExist"></iframe>
[[/embed]]
[[/module]]
[[/div]]

[[html]]
<script type="text/javascript">
//検索ページのURLを格納
var baseURL = "http://scp-jp.wikidot.com/scpauthorssearch/";
</script>
<style type="text/css">
@import url(http://scp-jp.wdfiles.com/local--files/japanese-syntax/scp-WikidotCss.css);
form{
display:block;
width:100%;
}
form input[type="radio"]{
    cursor:pointer;
}

#result{
    width:100%;
    border:solid #DDD 2px;
    padding:3px;
    height:200px;
    margin:auto;
    overflow-y:scroll;
}

#result2{
    width:100%;
    height:200px;
    margin:auto;
    border:solid #DDD 2px;
}

@media (max-width: 479px) { 
    #showTypeTitle{
    	display:block;
    }
}
</style>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--files/japanese-syntax/scpHTMLblockCtrl_ver1_ex.js"></script>

<div style="text-align:center;" id="Prepara"><!-- <span style="color:#999;" class="fa fa-spinner fa-pulse fa-5x"></span> -->
</div>

<div id="searchForm" style="display:none;">
<b>SCP番号入力</b><br />
<input type="text" size="40" maxlength="100" onkeydown="(function(event){
if(event.keyCode == 13){
setParametorAndReload();
}
})(event)" id="searchWord"></input><button style="cursor:pointer;" onclick="setParametorAndReload();" id="runButton">検索</button>
<span id="loading"  style="color:#888;display:none;"></span>
<div style="width:85%;margin:auto;">
<br />
<b id="Name1">作品データ:</b>
<div id="result" style="display:block;">
</div>
<textarea id="result2" style="display:none;" readonly>
</textarea>
<form name="display_result" style="block">
<b id="showTypeTitle">結果表示</b>
<input type="radio" name="showtype" checked>リッチテキスト　<input type="radio" name="showtype">HTMLソース
</form>
<div id="ProcessStack"></div>
<b id="Name2" style="display:none;">001提言</b>
<div id="ProposalList">
</div>
</div>

</div>
<b>共有用URL:</b><br />
<textarea style="width:90%;height:40px;display:block;margin:auto;border:solid #A55 2px;padding:2px;" id="RestoreURL" readonly></textarea>
<div id="seamlessPageList"></div>
<div id="scpHTMLblockResizeSwitch"></div>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpmetatitlesearch/1"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpmetatitlesearch/4"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/1"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/2"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/3"></script>
<script type="text/javascript">
var word;//検索語句入力欄
var resultCredit;//検索結果表示欄
var resultCreditSource;//HTMLソース表示欄
var SearchMachine;//検索用のiframeを格納
var CommonSCPTitle;//検索結果上部の表示
var ProposalTitle;//提言リスト時の検索結果上部の表示
var ProposalList;//提言リスト表示欄


var RunButton;//検索用ボタン

var ForeignCountriesParametor = "OriginalSearch";
var seamlessPageListArea;
var seamlessPageList;
var ProporsalParametor = "Proporsal";
var SubParts = "OnlySubParts";

//表示すべきであり、なおかつ現在未表示のクレジットを格納する
var creditStack = new Array();
//その回の検索で表示すべきクレジットの数を格納する
var creditStartingMax = 0;
//表示し終えたクレジットの数をカウントする
var creditViewCount = 0;
//先ほどまで持っていたクレジットの総数を記録する
var RegistCredit = -1;
//検索すべきSCPのリスト
var serachSCPNumberList = new Array();
//次の検索を可能にするかのフラグ
var PermitSearch = true;
//検索に使われた語句を格納する
var ResultSearchWord = "";
//メタタイトルリスト
var metaTitleList = new Array();
//読み込み中を示すグルグル
var LoadingIndicator;

document.addEventListener("DOMContentLoaded",function(){

    var url = document.referrer.split(baseURL).join("");
    RunButton = document.getElementById("runButton");
    if(url.indexOf("fullname") == 0 && url.indexOf(SubParts) >= 0){
    	//サブパーツとして呼ばれた場合のみ動作
    
    	//JP番号の検索　ListPagesから情報取得
    	var check = true;
    	var checkFrame;
    	try{
    		checkFrame = window.parent.window.isJPExist;
    		if(checkFrame == undefined){
    		check = false;
    		}
    	}catch(e){
    		check = false;
    	}
    	//該当のJP番号がある場合、内容を取得
    	if(check){
    		setUpJP();
    	}else{
    		//現在非表示のクレジットリストにスタックする（メインとして呼ばれている自分自身の変数にアクセス）
    		parent.parent.creditStack.push(nonHitResult);	
    	}
    }else if(url.indexOf(SubParts) < 0){
    	//検索機能及び検索結果表示に必要なHTML要素を取得する
    	word = document.getElementById("searchWord");
    	resultCredit = document.getElementById("result");
    	resultCreditSource = document.getElementById("result2");
    	seamlessPageListArea = document.getElementById("seamlessPageList");
    	LoadingIndicator = document.getElementById("loading");
    	CommonSCPTitle = document.getElementById("Name1");
    	ProposalTitle = document.getElementById("Name2");
    	ProposalList = document.getElementById("ProposalList");
    	//読み込み中のインジケータを生成
    	var actualIndicator=document.createElement("span");
    	actualIndicator.setAttribute("class", "fa fa-spinner fa-pulse" );
    	LoadingIndicator.appendChild(actualIndicator);
    	//iframe読み込み用ではない場合、自分自身を格納するiframeを作る
    	seamlessPageList = document.createElement("iframe");
    	seamlessPageList.setAttribute("style","display:none;");
    	seamlessPageListArea.appendChild(seamlessPageList);
    	if((url.indexOf(ForeignCountriesParametor) == 0) || (url.indexOf(ProporsalParametor)==0)){
    		setUp(url,true);
    	}else {
    		setUp(url,false);
    	}
    	//ラジオスイッチにイベントを紐づける
    	for(var i = 0;i < document.display_result.showtype.length;i++){
    		document.display_result.showtype[i].setAttribute("onclick","changeViewType();");
    	}	
    }
});

//検索の始点
function setParametorAndReload(){
    //検索が許可されていない場合処理を止める
    if(!PermitSearch){
    	return;
    }
    //検索終了まで次の検索を実行させない
    setPermitSituation(false);
    //クレジットリストの初期化
    ResetSearchState();
    //結果表示要素の初期化
    showCommonSCPResultArea();
    ResultSearchWord = "";
    document.getElementById("ProcessStack").innerHTML = "";
    correctIframeSize();
    //検索すべきSCPの番号をリスト化する
    serachSCPNumberList = word.value.split(",");
    if(!Array.isArray(serachSCPNumberList)){
    	serachSCPNumberList = new Array();
    }
    document.getElementById("ProcessStack").innerHTML = "表示タスク:" + creditViewCount + "/" + creditStartingMax;
    //検索すべきSCPの個数を記録
    creditStartingMax = serachSCPNumberList.length;
    //検索開始
    searchMultiSCPNumber();
    //検索結果表示
    showStackCredit();
}

//リストを順次検索していく
function searchMultiSCPNumber(){
    //直前までに記録した結果スタックの数と現在の結果スタックの数に違いがあった場合、先ほどまでの検索が完了したと判定する
    var checkCount = creditStack.length;
    if(RegistCredit < checkCount){
    	//結果スタックの数を記録する
    	RegistCredit = checkCount;
    	if(RegistCredit < creditStartingMax){
    		if(isNullOrWhiteSpace(serachSCPNumberList[RegistCredit])){
    			//検索語句が空欄であった場合
    			creditStack.push("");
    		}else{
    			//検索語句が存在する場合検索を行う
    			searchSingleSCPNumber(serachSCPNumberList[RegistCredit]);
    		}
    	}
    }
    //全検索スタックに対する処理が終わるまでこの処理を続ける
    if(creditStartingMax > RegistCredit){
    	setTimeout(searchMultiSCPNumber,10);
    }
}


function searchSingleSCPNumber(targetNumber){
    //検索語の生成
    var search = targetNumber;
    var upperSearch = addPrefixZeroForSCP(search.toUpperCase().trim());
    if(upperSearch == "SCP-001-JP"){
    	showingProposalList("SCP-001-JP",SearchMachine.createList001JPProposalList());
    }else if(isSCPJPRegex(upperSearch)){
    	//日本支部の通常もしくはEXのSCP　サブパーツとして自身に埋め込んだ自分自身にパラメータを送る
    	search = addPrefixZeroForSCP(search);
    	metaTitleList.push(searchCommonJP(search.toUpperCase().trim()));
    	seamlessPageList.src = baseURL + "fullname/" + search.toLowerCase() + "/" + SubParts;	
    }else if(isSCPJPJRegex(upperSearch)){
    	var resultObjJPJ = searchJPJ(deformPartiallyUpperCase(search));
    	metaTitleList.push(resultObjJPJ.metatitle);
    	//日本支部のJoke　サブパーツとして自身に埋め込んだ自分自身にパラメータを送る
    	seamlessPageList.src = baseURL + "fullname/" + resultObjJPJ.fullname + "/" + SubParts;
    }else{
    	//SCP-[任意の文字]-JPでもSC[任意の文字]-JP-Jでもない場合
    	if((upperSearch.match(/^SCP\-..\-001/) || upperSearch.match(/^SCP\-001/)) && !search.match(/\-J$/)){
    		//本部もしくは海外支部のSCP-001の場合
    		searchCredit(ForeignCountriesParametor + "/" + search);
    		correctIframeSize();
    	}else{
    		//海外支部の通常もしくはEXのSCPNumber
    		searchCredit(ForeignCountriesParametor + "/" + search);
    		correctIframeSize();
    	}
    }
}

//検索結果を表示する
function showStackCredit(){
    //検索結果のスタックを監視し、スタックにある結果を表示する
    while(creditViewCount < creditStack.length){
    	//検索結果スタックに格納されていてなおかつ表示されていない結果がある場合は表示する
    	var resultRecord = creditStack[creditViewCount];
    	//メタタイトルを取得している場合、検索結果にメタタイトルを表示する
    	var ActualSearchWord = deformPartiallyUpperCase(serachSCPNumberList[creditViewCount]);
    	resultRecord = addMetaTitleResult(resultRecord,metaTitleList[creditViewCount],ActualSearchWord);
    	//今回追加する検索結果のコード
    	var resultWordSource = ((resultRecord==nonHitResult)?(ActualSearchWord+ResultWrap):"")+resultRecord;
    	resultCredit.innerHTML = resultCredit.innerHTML + resultWordSource;//リッチテキスト
    	resultCreditSource.value += resultWordSource;//ソースコード
    	ResultSearchWord += ActualSearchWord+",";//検索語句の修正
    	creditViewCount++;
    }
    document.getElementById("ProcessStack").innerHTML = "表示タスク:" + creditViewCount + "/" + creditStartingMax;
    if(creditViewCount < creditStartingMax){
    	//検索結果が全てできていない場合は監視を続ける
    	setTimeout(showStackCredit,10);
    }else{
    	//検索結果が全て表示された場合は次の検索を有効にし、共有URLを作成する
    	setPermitSituation(true);
    	word.value = ResultSearchWord.substring(0,ResultSearchWord.length-1);
    	document.getElementById("RestoreURL").value = baseURL + ForeignCountriesParametor + "/" + word.value;
    	correctIframeSize();
    }
}

//SCP-001-JPの各提言を検索し表示する
function searchProposalJP(pagename,metatitle){
    //結果表示要素の初期化
    showCommonSCPResultArea();
    //次の検索を無効化し、検索すべきタスクが1つある状態にする
    setPermitSituation(false);
    ResetSearchState();
    word.value = "";
    ResultSearchWord = "";
    serachSCPNumberList.push("scp-001-jp");
    if(!isNullOrWhiteSpace(metatitle)){
    	metaTitleList.push(trasrateWikidotToHtml(metatitle));
    }else{
    	metaTitleList.push(trasrateWikidotToHtml(""));
    }
    creditStartingMax = 1;
    //iframeに格納した自分自身にパラメータを送り、ListPagesで検索を行う
    seamlessPageList.src = baseURL + "fullname/"+ pagename + "/" + SubParts;
    //検索結果表示
    showStackCredit();
}

//SCP-JP,SCP-JP-EX,SCP-JP-ARCのメタタイトルを検索する
function searchCommonJP(word){
    return SearchMachine.getSCPJPmetaTitle(word);
}

//SCP-JP-Jを検索、検索用iframeからpagenameを取得しfullname検索にかける
function searchJPJ(word){
    return SearchMachine.getJPJPageName(word);
}

//JP以外の001の各提言を検索する
function searchProposal(elm,branch){
    if(branch!= "JP"){
    	searchCredit(ProporsalParametor+"/"+ branch+"/"+elm.innerHTML);
    	//parent.location.href = baseURL + ProporsalParametor+"/"+ branch+"/"+elm.innerHTML;
    }
}

//画面が開かれたと同時に起動する。SearchMachineに検索用iframe格納
function setUp(url,search){
    var brotherSearch = window.parent.window.frames;
    //検索用のデータ及び関数を保持するiframeの検索
    for(var i = 0;i<brotherSearch.length;i++){
    	try{
    		if(typeof(brotherSearch[i].getCredit) == "function"){
    			SearchMachine = brotherSearch[i];				
    			break;
    		}
    	}catch(e){

    	}
    }
    if(!SearchMachine){
    	setTimeout(function(){setUp(url,search)},50);
    }else{
    	document.getElementById("searchForm").style.display = "block";
    	document.getElementById("Prepara").style.display = "none";
    	//共有用URLによる自動検索
    	if(search){
    		if(url.indexOf(ForeignCountriesParametor) == 0){
    			var checkURL = url.split(ForeignCountriesParametor+"/").join("");
    			word.value = decodeURIExtension(checkURL);
    			setParametorAndReload();
    		}
    		
    	}
    	//if(search)searchCredit(url);
    }
}

/*呼び出し元:document.addEventListenerに組み込まれた無名関数
発動条件:window.parent.window.isJPExistが存在する（該当のSCP-JPが存在する）
動作:ListPagesから著者名等の取得*/
function setUpJP(){
    //この関数はサブパーツ（ListPagesの情報発信用のページ）として呼ばれた時に動く
    var brotherSearch = window.parent.window.frames;
    for(var i = 0;i<brotherSearch.length;i++){
    	try{
    		if(typeof(brotherSearch[i].getJPSCP) == "function"){
    			SearchMachine = brotherSearch[i];				
    			break;
    		}
    	}catch(e){

    	}
    }
    if(!SearchMachine){
    	setTimeout(setUpJP,10);
    }else{
    	//現在非表示のクレジットリストにスタックする (メインとして呼ばれている自分自身の変数にアクセス)
    	parent.parent.creditStack.push(SearchMachine.getJPSCP() + ResultWrap);
    }
}

function searchCredit(url){
    //従来は検索を行うごとにパラメータを含んだページに遷移する仕組みであった為、その名残としてURL解析の後がある
    		
    var isProposal = false;
    var branch = "EN";
    var ParametorName;
    var wordEnd;
    var targetpoint;
    var creditWord;
    if(url.indexOf(ForeignCountriesParametor) == 0){
    	//通常SCP番号（SCP-001そのものはこの検索を掛けられる）
    	ParametorName = ForeignCountriesParametor + "/";
    	wordEnd = ParametorName.length;
    	targetpoint = url.indexOf(ParametorName)+wordEnd;
    	for(var i = targetpoint;i < url.length;i++){
    		if(url.charAt(i).match(/#|\//))break;
    	}
    	//検索文字列を大文字にし、端部のスペースを除去する
    	creditWord = deformPartiallyUpperCase(url.substring(targetpoint,i));
    }else if(url.indexOf(ProporsalParametor)==0){
    	//各001提言の検索
    	isProposal = true;
    	ParametorName = ProporsalParametor + "/";
    	wordEnd = ParametorName.length;
    	targetpoint = url.indexOf(ParametorName)+wordEnd;
    	for(var i = targetpoint;i < url.length;i++){
    		if(url.charAt(i).match(/#|\//))break;
    	}
    	branch = url.substring(targetpoint,i).toUpperCase();
    	for(targetpoint=(i+1);targetpoint<url.length;targetpoint++){
    		if(url.charAt(targetpoint).match(/#|\//))break;
    	}
    	creditWord = decodeURIExtension(url.substring(i+1,targetpoint));
    }
    var resultObject = SearchMachine.getCredit(creditWord,isProposal,branch);
    if(!resultObject.List){
    	
    	if(isProposal){
    		//各提言を表示する場合
    		showCommonSCPResultArea();
    		resultCredit.innerHTML = addMetaTitleResult(resultObject.text,resultObject.metatitle,creditWord);
    		resultCreditSource.value = resultCredit.innerHTML;
    	}else{
    		//その他SCPの処理
    		creditStack.push(resultObject.text + ResultWrap);
    		metaTitleList.push(resultObject.metatitle);//メタタイトル格納
    	}
    }else{
    	showingProposalList(creditWord,resultObject.text);
    }
}



//検索状況を初期化する
function ResetSearchState(){
    creditStack = null;//Dispose
    creditStack = new Array();
    creditStartingMax = 0;
    creditViewCount = 0;
    serachSCPNumberList = null;//Dispose
    serachSCPNumberList = new Array();
    metaTitleList = null;//Dispose
    metaTitleList = new Array();
    RegistCredit = -1;
}

function setPermitSituation(isPermit){
    var set = (isPermit)?100:50;
    RunButton.style.filter = 'alpha(opacity='+ set + ')';
    // Firefox用
    RunButton.style.MozOpacity = set/100;
    // Safari用
    RunButton.style.opacity = set/100;
    PermitSearch = isPermit;
    LoadingIndicator.style.display = (isPermit)?"none":"inline";
}

//JokeSCPに関してはSCPという表記や支部及びEXやJ等の表記のみを大文字にする
function deformPartiallyUpperCase(originalText){
    originalText = originalText.trim();
    var testUpperCase = originalText.toUpperCase();
    
    if(!testUpperCase.match(/\-J$/)){
    	return addPrefixZeroForSCP(testUpperCase);
    }
    var textArray = testUpperCase.split("-");
    
    if(textArray.length < 3){
    	return testUpperCase;
    }
    
    //SCP-[支部]表記か判定
    var checkMiddle = false;
    var isBranch = false;
    var middleBranch = ["CN","PL","ES"];
    for(i = 0;i < middleBranch;i++){
    	if(textArray[1] == middleBranch[i]){
    		checkMiddle = true;
    		isBranch = true;
    		break;
    	}
    }
    
    if(!checkMiddle){
    	if(textArray[textArray.length - 2].match(/^[A-Z]+$/)){
    		isBranch = true;
    	}
    }
    
    //大文字にしない位置の選定を行う
    var TextPartsNum = 3;
    if(isBranch){
    	TextPartsNum = 4;
    }
    //SCウォアアア…対策　節目の数が規定数と合っていないなら全てを大文字にした文字列を返す
    if(textArray.length != TextPartsNum){
    	return testUpperCase;
    }
    var result = "";
    var OriginalArray = originalText.split("-");
    var NonDeform = (checkMiddle)?2:1;
    for(i = 0;i < textArray.length;i++){
    	if(i == NonDeform){
    		result += OriginalArray[i] + ((i < (textArray.length-1))?"-":"");
    	}else{
    		result += textArray[i] + ((i < (textArray.length-1))?"-":"");
    	}
    }
    return result;
}

//通常SCPの表示領域を表示する
function showCommonSCPResultArea(){
    //提言リスト表示領域を非表示にする
    ProposalList.innerHTML = "";		
    ProposalTitle.style.display = "none";
    //通常SCP検索結果表示領域を表示し検索結果をクリアする
    document.display_result.style.display = "block";
    CommonSCPTitle.style.display = "inline";
    changeViewType();
    resultCredit.innerHTML = "";
    resultCreditSource.value = "";
}

//001提言リストを表示可否　及び表示を行う
function showingProposalList(creditWord,resultText){
    	if(creditStartingMax < 2){
    		//通常SCP検索結果表示領域を消す
    		document.display_result.style.display = "none";
    		resultCredit.style.display = "none";
    		resultCreditSource.style.display = "none";
    		CommonSCPTitle.style.display = "none";
    		//SCP-001の検索結果の場合各提言リストを表示する
    		ProposalTitle.style.display = "inline";
    		ProposalTitle.innerHTML = creditWord + "提言リスト";
    		ProposalList.innerHTML = resultText;
    		creditStack.push("");
    		metaTitleList.push("");
    	}else{
    		//検索語が2以上の場合はリストを表示しない
    		metaTitleList.push("");
    		creditStack.push(creditWord+"は単独で検索してください" + ResultWrap2);
    	}

}

//表示の仕方を切り替える
function changeViewType(){
    if(document.display_result.style.display == "none"){
    	return;
    }
    var showType = 0;
    for(var i = 0;i < document.display_result.showtype.length;i++){
    	if(document.display_result.showtype[i].checked){
    		showType = i;
    	}
    }
    switch(showType){
    	case 0:
    		//リッチテキスト
    		if(resultCredit.style.display == "block"){
    			return;
    		}
    		resultCredit.style.display = "block";
    		resultCreditSource.style.display = "none";
    	break;
    	case 1:
    		//HTMLソース
    		if(resultCreditSource.style.display == "block"){
    			return;
    		}
    		resultCredit.style.display = "none";
    		resultCreditSource.style.display = "block";		
    	break;
    
    }
}

//メタタイトルを適切な位置にとりつける
function addMetaTitleResult(resultText,metatitle,searchWord){
    if(resultText == nonHitResult){
    	return searchWord + ResultWrap +resultText;
    }
    if(!isNullOrWhiteSpace(metatitle)){
    	var tmpAnalysis = resultText.split(ResultWrap);
    	if(tmpAnalysis[1].indexOf("Title:") == 0){
    		tmpAnalysis[1] += metatitle;
    	}else{
    		for(var i = 2;i < tmpAnalysis.length;i++){
    			if(tmpAnalysis[i].indexOf("Title:") == 0){
    				tmpAnalysis[i] += metatitle;
    				break;
    			}
    		}		
    	}
    	resultText = tmpAnalysis.join(ResultWrap);
    }
    return resultText;
}

</script>



[[/html]]

[[div style="display:none;"]]
[[module ListPages range="."]]
[[%%content{0}%%html]]
<div style="display:none;">
<div id="scp-jp001-999">
[[include :scp-jp:scp-series-jp]]
</div>
<div id="scp-jp1000-1999">
[[include :scp-jp:scp-series-jp-2]]
</div>
<div id="scp-jp2000-2999">
[[include :scp-jp:scp-series-jp-3]]
</div>
<div id="scp-jp-ex">
[[include :scp-jp:scp-jp-ex]]
</div>
<div id="scp-jp-arc">
[[include :scp-jp:archived-scps-jp]]
</div>
<div id="scp001-999">
[[include :scp-jp:credits-scp-001-999]]
</div>
<div id="scp1000-1999">
[[include :scp-jp:credits-scp-1000-1999]]
</div>
<div id="scp2000-2999">
[[include :scp-jp:credits-scp-2000-2999]]
</div>
<div id="scp3000-3999">
[[include :scp-jp:credits-scp-3000-3999]]
</div>
<div id="scp4000-4999">
[[include :credits-scp-4000-4999]]
</div>
<div id="scp5000-5999">
[[include :credits-scp-5000-5999]]
</div>
<div id="otherBranch">
[[include :scp-jp:credits-scp-international]]
</div>
<div id="scp-variety-series">
[[include :scp-jp:credits-scp-others]]
</div>
<div id="SCP-001-JP">
[[include :scp-jp:scp-001-jp]]
</div>
<div id="SCP-JP-J">
[[include :scp-jp:joke-scps-jp]]
</div>
</div>
<div id="decodeZone">
</div>
<!-- 作者不明等を含めた例外時の作者不明表記を格納するDBもどき -->
<table id="ExceptionExpressTable">
<!--
 作者名表記(string),リンク構文の有無(bool),
他項目名(項目が1つだけの場合は設定しないカンマ区切りで指定),
項目ごとのリンクの有無(0か1で表記。特にない、もしくは同一の場合は設定しない、、設定する場合はカンマ区切り)
各項目において改行が必要か
汎用化が難しい場合　0 汎用　1 特殊
上記が1の場合の専用の変換構文
-->
<tr><td>執筆者：</td><td>1</td><td>その後,英訳・改稿,執筆協力：,後に</td><td>1,1,1,1</td><td>1,1,1,1</td><td>0</td><td>none</td></tr>
<tr><td>執筆者:</td><td>1</td><td>その後,英訳・改稿,執筆協力：,後に</td><td>1,1,1,1</td><td>1,1,1,1</td><td>0</td><td>none</td></tr>
<tr><td>//不明(アカウント削除済)//と[[user Roget]]の共同制作</td><td>0</td><td> </td><td> </td><td>0</td><td>1</td><td>不明、Roget　<br />※ 共同制作</td></tr>
<tr><td>執筆者: [[user qipajun]] [[user fuban]]</td><td>0</td><td> </td><td> </td><td>0</td><td>1</td><td>qipajun（文）、fuban（プログラム）</td></tr>
</table>

<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpmetatitlesearch/1"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/1"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/2"></script>
<script type="text/javascript" src="http://scp-jp.wdfiles.com/local--code/scpauthorssearch/3"></script>
<script type="text/javascript">

//検索結果を格納するエンティティ
var resultObjectEntity = function(){
    this.List=false;
    this.text=nonHitResult2;
    this.metatitle="";
}

    //作者不明を含めた例外の作者表記項目雛形
    var exceptionExpress = function(AuthorName,LinkExist,ContentsArray,ContentsExceptionArray,ContentWrapArray,isSpecialSentence,specialT){
    	/*構成
    	Author:string:表記
    	Link:bool:リンク構文の有無
    	Contents:Array(string):他項目名
    	ContentException:Array(bool):項目に応じてリンクの有無が変わる場合
    	ContentWrap:他項目に対し改行を行うか
    	IsSpecial:bool(汎用化できるか)
    	SpecialTranslate:string*/
    	this.Author = AuthorName;
    	this.Link = LinkExist;
    	this.Contents = ContentsArray.slice();
    	this.ContentException = ContentsExceptionArray.slice();
    	this.ContentWrap = ContentWrapArray.slice();
    	this.IsSpecial = isSpecialSentence;
    	this.SpecialTranslate = specialT;
    }
    
    //例外表記を格納する配列(雛形と組み合わせるとC#のListに近い構造になる)
    var exceptionExpressList = new Array();

//クレジットページから該当記事の著者名等を抽出する
function getCredit(target,isProposal,branchName){

    //例外リストを生成　※初回起動時のみ
    if(exceptionExpressList.length == 0){
    	createExceptionExpressList();
    }
    
    //検索結果のインスタンスをたてる
    var resultObject = new resultObjectEntity();
    //加工をする前の著者名表記
    var RowAuthorText = "";
    //検索する支部を検索
    var SorceObject = getResultSorce(target);
    //SCP-XXX等をscp-xxx表記に変換
    var SearchParam = target.toLowerCase();
    var idName = "scp001-999";
    //検索すべき構文が格納されている範囲を取得
    idName = getTextAreaName(SearchParam,SorceObject.branch);
    var textArea = document.getElementById(idName).innerHTML;
    		
    var Sorce = SorceObject.url;
    var point = textArea.indexOf(target);
    if(point<0){
    	return text = resultObject;
    }
    var authorArea;
    var Cright = "CC BY-SA 3.0";
    if(target.match(/\-RU$/) || target.match(/\-RU\-J$/)){
    	Cright = "CC BY-SA 3.0";
    }
    
    if((target.match(/^SCP\-..\-001/) || target.match(/^SCP\-001/)) && !target.match(/\-J$/)){
    	//001提言
    	resultObject.List = true;
    	for(var i = point;i < textArea.length;i++){
    		if(textArea.charAt(i) == "\n" || textArea.charAt(i) == "/"){
    			break;
    		}
    	}
    	textArea = textArea.substring(i,textArea.length);
    	textArea = textArea.substring(0,textArea.indexOf("* [[[SCP"));
    	resultObject.text = replasticProporsal(textArea,SorceObject.branch);
    }else{
    	var RowStartPoint = 0;//行の始まりの位置
    	var RowEndPoint = 0;//行の終りの位置
    	//検索ワードから行の終りの改行文字の座標を取得
    	var searchContinue = true;
    	while(searchContinue){
    		for(var checkI = point;checkI >= 0;checkI--){
    			if(textArea.charAt(checkI) == "]"){
    				textArea = textArea.substring(point + target.length,textArea.length);
    				point = textArea.indexOf(target);
    				break;
    			}else if(textArea.charAt(checkI) == "["){
    				if(decideTargetRow(target,textArea,checkI)){
    					searchContinue = false;
    					break;
    				}else{
    					textArea = textArea.substring(point + target.length,textArea.length);
    					point = textArea.indexOf(target);						
    				}
    			}
    			if(checkI == 0){
    				point = -1;
    			}
    		}
    		if(point < 0){
    			return resultObject;
    		}
    	}
    	for(var i = point;i < textArea.length;i++){
    		if(textArea.charAt(i) == "\n"){
    			RowEndPoint = i;
    			break;
    		}
    	}

    	//行の始まりの位置を取得
    	for(i = point;i >= 0;i--){
    		if(textArea.charAt(i) == "\n" || i == 0){
    			RowStartPoint = i;
    			break;
    		}
    	}

    	//対象となる行を取り出す
    	var targetRow = ConvertNormalAuthorLink(textArea.substring(RowStartPoint,RowEndPoint));
    	//リンク先URLを取得する
    	var pagename = getPageNameLink(targetRow,SearchParam);
    	//[[user hogehoge]]という形を想定した解析
    	getAuthorName();
    	if(isNullOrWhiteSpace(authorArea)){
    		return new resultObjectEntity();
    	}
    	target = getLinkName(target,targetRow);
    	resultObject.text = "Author: "+(authorArea.split("[[user ").join("").split("//").join(""))+ ResultWrap+"Title: "+ target+ResultWrap+"Source: "+ '<a target="_blank" href="' + Sorce+ pagename + '">' + Sorce + pagename+ "</a>"  + ResultWrap+
    	Cright+ResultWrap;
    	resultObject.metatitle = trasrateWikidotToHtml(getMetaTitle());
    }
    return resultObject;  	

        function getLinkName(target,targetRow){
             if(targetRow.match(/\[\[\[.*\|[^\|]*\]\]\]/)){
                 var found = targetRow.match(/\[\[\[.*\|[^\|]*\]\]\]/);
                 found = found[0].replace(/\]\]\].*/,'');
                 return found.split('|')[1];
             }
             return target;

        }
    
    function decideTargetRow(targetWord,allText,number){
    	var replastic = allText.substring(number,allText.length);
    	for(var i = 0;i < replastic.length;i++){
    		if(replastic.charAt(i) == "]"){
    			replastic = replastic.substring(0,i);
    		}
    	}
    	replastic = replastic.split("[").join("");
    	replastic = replastic.split("]").join("");
    	var resultTarget = false;
    	if(replastic.indexOf("|")){
    		var testCheck = replastic.split("|");
    		for(var i = 0;i < testCheck.length;i++){
    			testCheck[i] = testCheck[i].trim();
    			if(testCheck[i] == targetWord){
    				resultTarget = true;
    			}
    		}
    	}else{
    		var testCheck = replastic.split(" ");
    		for(var i = 0;i < testCheck.length;i++){
    			testCheck[i] = testCheck[i].trim();
    			if(testCheck[i] == targetWord){
    				resultTarget = true;
    			}
    		}
    	}
    	return resultTarget;
    }

    //作品情報を取得する為のリストデータを選択
    function getTextAreaName(targetParam,branch){
    	var analysisText = "";
    	var result = "";
    	if(isProposal){
    		switch(branchName){
    			case "EN":
    				result = "scp001-999";
    			break;
    			default:
    				result = "otherBranch";
    			break;
    		}
    		return result;
    	}
    	if(targetParam.match(/^scp\-\d*$/)){
    		analysisText = Number(targetParam.split("scp-").join(""));
    		if(analysisText < 1000){
    			result = "scp001-999";
    		}else if(analysisText < 2000){
    			result = "scp1000-1999";
    		}else if(analysisText < 3000){
    			result = "scp2000-2999";
    		}else if(analysisText < 4000){
    			result = "scp3000-3999";
    		}else if(analysisText < 5000){
    			result = "scp4000-4999";	
    		}else if(analysisText < 6000){
    		        result = "scp5000-5999";			
    		}else{
    			//ない場合
    			result = "scp001-999";
    		}
    	}else if(branch == "EN"){
    		//ENのJoke等
    		result = "scp-variety-series";
    	}else{
    		//他の海外支部
    		result = "otherBranch";
    	}
    	return result;
    }
    
    
    //各支部におけるメインURLの取得
    function getResultSorce(targetParam){
    	var resultObject = {
    		url:"http://www.scp-wiki.net/",
    		branch:"EN"
    	}
    	if(isProposal){
    		resultObject.branch = branchName;
    		switch(branchName){
    			case "KO":
    				resultObject.url = "http://ko.scp-wiki.net/";
    			break;
    			case "RU":
    				resultObject.url = "http://fondationscp.wikidot.com/";
    			break;
    			case "FR":
    				resultObject.url = "http://fondationscp.wikidot.com/";
    			break;
    			case "DE":
    				resultObject.url = "http://scp-wiki-de.wikidot.com/";
    			break;
    			case "IT":
    				resultObject.url = "http://fondazionescp.wikidot.com/";
    			break;
    			case "TH":
    				resultObject.url = "http://scp-th.wikidot.com/";	
    			break;
    			case "CN":
    				resultObject.url = "http://scp-wiki-cn.wikidot.com/";	
    			break;
    			case "ES":
    				resultObject.url = "http://lafundacionscp.wikidot.com/";
    			break;
    			case "PL":
    				resultObject.url = "http://scp-wiki.net.pl/";
    			break;
    			case "UA":
    				resultObject.url = "http://scp-ukrainian.wikidot.com/";
    			break;
    			case "PT":
    				resultObject.url = "http://scp-pt-br.wikidot.com/";
    			break;
    			
    		}
    		return resultObject;
    	}
    	//JP、EN以外の支部かを判定する
    	resultObject = getSCPOtherBranchRegex(targetParam,resultObject);
    	return resultObject;
    }
    
    function replasticProporsal(targetText,branch){
    	var startIndex = 0;
    	var endIndex = 0;
    	var link = "";
    	while(targetText.indexOf("|") >= 0){
    		startIndex = targetText.indexOf("|");
    		endIndex = targetText.indexOf("]]]");
    		link += '<span class="fake-link" onclick="searchProposal(this,'+"'"+branch+"'"+')">'+targetText.substring(startIndex+1,endIndex)+"</span>" + ResultWrap;
    		targetText = targetText.substring(endIndex+3,targetText.length);
    	}
    	return link;
    	
    }
    
    //作者不明等を含めた例外的な作者名表記のリストを作る
    function createExceptionExpressList(){
    	//Bodyにあるテーブル要素から例外リストを生成する
    	var DBTble = document.getElementById("ExceptionExpressTable");
    	var Records = DBTble.getElementsByTagName("tr");
    	var Column;//各列の値を格納
    	var newRecord;
    	var Name;
    	var Link;
    	var NameArray;
    	var LinkArray;
    	var WrapArray;
    	var IsSpecial;
    	var SpecialTranslate;
    	for(var i = 0;i < Records.length;i++)
    	{
    		Column = Records[i].getElementsByTagName("td");
    		Name = Column[0].innerHTML;
    		Link = (Number(Column[1].innerHTML) > 0);
    		NameArray = Column[2].innerHTML.split(",").slice();
    		if(!Array.isArray(NameArray)){
    			NameArray = new Array();
    		}
    		LinkArray = Column[3].innerHTML.split(",").slice();
    		if(!Array.isArray(LinkArray)){
    			LinkArray = new Array();
    		}
    		for(var j = 0;j < LinkArray.length;j++){
    			LinkArray[j] = (Number(LinkArray[j]) > 0);
    		}
    		WrapArray = Column[4].innerHTML.split(",").slice();
    		if(!Array.isArray(WrapArray)){
    			WrapArray = new Array();
    		}
    		for(j = 0;j < WrapArray.length;j++){
    			WrapArray[j] = (Number(WrapArray[j]) > 0);
    		}

    		IsSpecial = (Number(Column[5].innerHTML) > 0);
    		SpecialTranslate = Column[6].innerHTML.split("\n").join("");
    		SpecialTranslate = SpecialTranslate.split("<br />").join(ResultWrap);
    		SpecialTranslate = SpecialTranslate.split("<br>").join(ResultWrap);
    		exceptionExpressList.push(new exceptionExpress(Name,Link,NameArray,LinkArray,WrapArray,IsSpecial,SpecialTranslate));
    	}
    	//表記の文字数が多い順にソートする
    	exceptionExpressList.sort(function(v1,v2){
    		return v2.Author.length - v1.Author.length;
    	});
    	
    }
    
    //SCP-CNにおける特殊なリンク先を[[user hogehoge]]に変換する
    function ConvertNormalAuthorLink(sentence){
    	//例外リンク先
    	var exceptionLinks = ["http://tieba.baidu.com/home/main","http://scpfoundation.123ubb.com"];
    	for(var i = 0;i < exceptionLinks.length;i++){
    		while(sentence.indexOf(exceptionLinks[i]) >= 0){
    			var LinkPosition = sentence.indexOf(exceptionLinks[i]);
    			var start = LinkPosition + exceptionLinks[i].length;
    			var space = -1;
    			var endLink = -1;
    			for(var j = start;j < sentence.length;j++){
    				var getChar = sentence.charAt(j);
    				if(getChar == " "){
    					if(space < 0)space = j;
    				}
    				if(getChar == "]"){
    					endLink = j;
    				}
    				if(space >= 0 && endLink >= 0){
    					break;
    				}
    			}
    			if(space >= 0 && endLink >= 0){
    				var EndedSentence = sentence.substring(endLink,sentence.length);
    				var StartSentence = sentence.substring(0,endLink);
    				sentence = StartSentence + "]" + EndedSentence;
    				EndedSentence = sentence.substring(space,sentence.length);
    				StartSentence = sentence.substring(0,LinkPosition);
    				sentence = StartSentence + "[user " + EndedSentence;

    			}else{
    				break;
    			}

    		}

    	}
    	return sentence;

    }

    //リンク先pagenameを取得する
    function getPageNameLink(SearchRow,searchWord){
    	if(isNullOrWhiteSpace(SearchRow) || isNullOrWhiteSpace(searchWord)){
    		return searchWord;
    	}
    	
    	//検索語該当箇所を調べる
    	searchWord = searchWord.toLowerCase();
    	SearchRow = SearchRow.toLowerCase();
    	var startNumber = SearchRow.indexOf(searchWord);
    	if(startNumber < 0){
    		return searchWord;
    	}
    	
    	//リンク構文がただタイトルを打ち込んだものだけであった場合検索を終了する
    	for(var i = startNumber;i >= 0;i--){
    		if(SearchRow.charAt(i) == "["){
    			for(var k = i;k < SearchRow.length;k++){
    				if(SearchRow.charAt(k) == "]"){
    					return searchWord;
    				}
    				if(SearchRow.charAt(k) == " " || SearchRow.charAt(k) == "|"){
    					i = k;
    					break;
    				}
    			}
    		}
    		if(SearchRow.charAt(i) == " " || SearchRow.charAt(i) == "|"){
    			break;
    		}
    	}
    	//リンク先URL取得用検索業を切り出す
    	var testSearch = SearchRow.substring(0,i);
    	//リンク構文の始点まで検索業を切り詰める
    	while(testSearch.length > 0){
    		if(testSearch.match(/^\[/)){
    			break;
    		}else{
    			testSearch = testSearch.substring(1,testSearch.length);
    		}
    	}
    	if(testSearch.length == 0){
    		return searchWord;
    	}
    	//リンク構文視点を示す文字列が終わるまで行を切りつける
    	while(testSearch.match(/^\[/)){
    		testSearch = testSearch.substring(1,testSearch.length);
    	}
    	if(isNullOrWhiteSpace(testSearch)){
    		return searchWord;
    	}
    	testSearch = testSearch.trim();
    	return replasticPageName(testSearch);
    	
    }
    
    //条件付きの変換法則に則り作者名を取得する
    function getAuthorName(){
    	
    	//予め設定したキーワードに基づいた作者名検索を行う
    	var isGetAuthorName = searchCommonSCP();
    	//上記のキーワード検索で作者名が見つかり、なおかつ001提言ではない場合処理を止める
    	if(!isProposal && isGetAuthorName)return;

    	//キーワードによる作者名検索が成功していない場合
    	if(!isGetAuthorName){
    		runRoughlySearch();
    	}
    	//001提言の場合表示するURLを取得する
    	if(isProposal){
    		for(i = point;i >= 0;i--){
    			if((textArea.charAt(i) == "|") || (textArea.charAt(i) == " ") )break;
    		}
    		for(j = i;j >= 0;j--){

    			if(textArea.charAt(j) == "[")break;
    		}
    		if((textArea.charAt(i-1) == "|")){
    			i--;
    		}
    		SearchParam = replasticPageName(textArea.substring(j+1,i));
    	}	
    
    
    	function searchCommonSCP(){
    		//例外に含まれる執筆者名表記か検索
    		var EvaluationString = targetRow.substring(target.length,targetRow.length).trim();
    		var checkValue = "";
    		for(var checkChar = EvaluationString.length-1;checkChar >= 0;checkChar--){
    			//例外指定した作者表記がないか検索する
    			checkValue = EvaluationString.charAt(checkChar) + checkValue;
    		
    			for(var exceptionString = 0;exceptionString < exceptionExpressList.length;exceptionString++){
    				if(exceptionExpressList[exceptionString].Author.length <= checkValue.length){
    			
    					var checkIndex = checkValue.indexOf(exceptionExpressList[exceptionString].Author);
    					if(checkIndex >= 0){
    						if(exceptionExpressList[exceptionString].IsSpecial){
    							RowAuthorText = exceptionExpressList[exceptionString].Author;
    							authorArea = exceptionExpressList[exceptionString].SpecialTranslate;
    							return true;
    						}else{
    							//それ以外の場合、特殊表記に合わせて作者名を抽出する
    							RowAuthorText = checkValue;
    							getAuthorNames(exceptionExpressList[exceptionString],checkIndex,checkValue);
    							return true;
    						}
    					
    					}
    				}
    			}
    		}
    		return false;
    	}
    	function getAuthorNames(checkExcept,targetNumber,checkValue){
    		authorArea = checkValue.substring(targetNumber,checkValue.length);
    		if(checkExcept.Link){
    			//余分な文字等を除去し、作者名のみ抽出する
    			authorArea = authorArea.substring(checkExcept.Author.length,authorArea.legnth);
    			var isNormal = true;
    			if(checkExcept.Contents.length > 0){
    				var checkLintEnd = (checkMultAuthorLink())?authorArea.indexOf("]]") + 2:0;
    				for(var anotherN = 0;anotherN < checkExcept.Contents.length;anotherN++){
    					var anotherIndex = authorArea.indexOf(checkExcept.Contents[anotherN]);
    					if(anotherIndex >= checkLintEnd){
    						if(checkExcept.ContentWrap){
    							authorArea = authorArea.substring(0,anotherIndex) + ResultWrap + authorArea.substring(anotherIndex,authorArea.length);
    						}
    						isNormal = false;
    					}
    				
    				}
    			}
    			var multiAuthorCheck = false;
    			if(isNormal){
    				multiAuthorCheck = checkMultAuthorLink();
    			}
    			
    			var checker = (multiAuthorCheck)?(ResultWrap+"※共同制作"):"";
    			authorArea = authorArea.split("]]").join("");
    			checker = (authorArea.indexOf("改稿") > 0)?"":checker;
    			authorArea += checker;
    			
    			function checkMultAuthorLink(){
    				var ArrayCheck = authorArea.split("[[user ");
    				if(Array.isArray(ArrayCheck)){
    					return (ArrayCheck.length > 2);
    				}
    				return false;
    			
    			}

    		}
    		
    	}
    	function runRoughlySearch(){
    		//[[user hogehoge]]という形を想定した解析　共著者は取得できない
    		var startSearchPoint = targetRow.indexOf(target)+target.length;
    		for(var i = startSearchPoint;i < targetRow.length;i++){
    			if(targetRow.charAt(i) == "[" || targetRow.charAt(i) == "/"){
    				break;
    			}
    		}
    		
    		for(var j = i;j < targetRow.length;j++){
    			if(targetRow.charAt(j) == "]" || targetRow.charAt(j) == "/" || j == targetRow.length-1){
    				if(j == targetRow.length-1){
    					j++
    				}
    				authorArea = targetRow.substring(i,j);
    				break;
    			}
    		}
    		RowAuthorText = targetRow.substring(i,targetRow.length);
    	}
    }
    
    //メタタイトルを取得する
    function getMetaTitle(){
    	var resultTitle = "";
    	resultTitle = targetRow.substring(targetRow.indexOf("]"),targetRow.length);
    	while(resultTitle.indexOf("]") == 0){
    		resultTitle = resultTitle.substring(1,resultTitle.length);
    	}
    	resultTitle = resultTitle.split("\n").join("");
    	
    	resultTitle = resultTitle.substring(0,(resultTitle.length - RowAuthorText.length));
    	//メタタイトルの末尾にある-(ダッシュ)を消す
    	if(!isNullOrWhiteSpace(resultTitle)){
    		resultTitle = resultTitle.trim();
    		if(!isNullOrWhiteSpace(resultTitle)){
    			if(resultTitle.length > 2){
    				resultTitle = resultTitle.substring(0,resultTitle.length-1);
    			}
    		}
    	}
    	//メタタイトルの始点が" -"でなく"-"であるならば、半角スペースを付け足す
    	if(!resultTitle.match(/^ \-/) && resultTitle.match(/^\-/)){
    		resultTitle = " " + resultTitle;
    	}
    	return resultTitle;
    }
    
}


function createList001JPProposalList(){
    var textArea = document.getElementById("SCP-001-JP").innerHTML;
    var target = '[[div class="content-panel standalone series"]]';
    textArea = textArea.substring(textArea.indexOf(target)+target.length,textArea.length);
    var link = "";
    var startIndex = 0;
    var endIndex = 0;
    var title = "";
    var fullname = "";
    var metatitle = "";
    while(textArea.indexOf("[[[") >= 0){
    	startIndex = textArea.indexOf("|");
    	endIndex = textArea.indexOf("]]]");
    	title = textArea.substring(startIndex+1,endIndex);
    	fullname = textArea.substring(textArea.indexOf("[[[")+3,startIndex);
    	metatitle = getMetaTitleJP(textArea,textArea.indexOf(fullname));
    	fullname = replasticPageName(fullname);
    	link += '<span class="fake-link" onclick="searchProposalJP('+"'"+fullname+"','"+metatitle.replace(/"/g,'&quot;')+"'"+')">'+title+"</span><br />";
    	textArea = textArea.substring(endIndex+3,textArea.length);
    }
    return link;
    
}

//SCP-JPおよびSCP-JP-EXのメタタイトルを取得する
function getSCPJPmetaTitle(name){
    var result = "";
    name = name.trim();
    var number = 1;
    var target = "jp";
    if(name.match(/EX$/)){
    	target = "jp-ex";
    }
    if(name.match(/ARC$/)){
    	target = "jp-arc";
    }
    if(target == "jp"){
    	var analysisSCP = name.split("-");
    	number = Number(analysisSCP[1].trim());
    }
    var allList;
    switch(target){
    	case "jp":
    		if(number < 1000){
    			allList = document.getElementById("scp-jp001-999").innerHTML;
    		}else if(number < 2000){
    			allList = document.getElementById("scp-jp1000-1999").innerHTML;
    		}else if(number < 3000){
    			allList = document.getElementById("scp-jp2000-2999").innerHTML;				
    		}else{
    			allList = document.getElementById("scp-jp001-999").innerHTML;
    		}
    	break;
    	case "jp-arc":
    		allList = document.getElementById("scp-jp-arc").innerHTML;
    	break;
    	case "jp-ex":
    		allList = document.getElementById("scp-jp-ex").innerHTML;
    	break;
    }
    var testResult = removeDummyNumber(name,allList);
    if(testResult.index >= 0){
    	result = getMetaTitleJP(testResult.list,testResult.index);
    }
    return result;
}

//JP-Jの取得
function getJPJPageName(name){
    //Jp-Jのリストページの取得
    var resultObject = {
    	fullname:"",
    	metatitle:""
    }
    var targetArea = document.getElementById("SCP-JP-J").innerHTML;
    var start = targetArea.indexOf(name);
    
    if(start < 0){
    	resultObject.fullname = "scp-jp-nothing";
    	return resultObject;
    }
    resultObject.metatitle = getMetaTitleJP(targetArea,start);
    //構文解析
    var check = [0,0];
    for(var i = (start+name.length);i < targetArea.length;i++){
    	if(targetArea.charAt(i) == "]"){
    		check[1]++;
    		if(check[0] < 1)check[0]++
    	}else{
    		if(check[0] > 0)break
    	}
    }
    //[[[<paraname>]]]もしくは[[[<pagename>|<pagetitle>]]]
    if(check[1] == 3){
    	for(i = start;i > 0;i--){
    		if(targetArea.charAt(i) == "|"){
    			//[[[<pagename>|<pagetitle>]]]
    			splitAndGetPageName("|"+name);
    			break;
    		}
    		if(targetArea.charAt(i) == "["){
    			//[[[<pagename>]]]
    			targetArea = name;
    			break;
    		}
    	}
    }
    if(check[1] == 1){
    	for(i = start;i > 0;i--){
    		if(targetArea.charAt(i) == " "){
    			//[<pagename> <pagetitle>]
    			splitAndGetPageName(" "+name);
    			break;
    		}
    		if(targetArea.charAt(i) == "["){
    			//[<pagename>]
    			targetArea = name;
    			break;
    		}
    	}
    }
    resultObject.fullname = replasticPageName(targetArea);
    return resultObject;
    
    function splitAndGetPageName(word){
    	var list = targetArea.split(name);
    	for(var i = list[0].length;i--;i > 0){
    		if(list[0].charAt(i)=="[")break;
    	}
    	targetArea = list[0].substring(i+1,list[0].length-1);
    }
}

//JP一覧のメタタイトルを取得する
function getMetaTitleJP(allList,indexNumber){
    allList = allList.substring(indexNumber,allList.length);
    allList = (allList.split("\n"))[0];
    var breakPoint = allList.indexOf("]");
    if(breakPoint >= 0){
    	allList = allList.substring(breakPoint,allList.length);
    }
    while(allList.indexOf("]") == 0){
    	allList = allList.substring(1,allList.length);
    }
    return trasrateWikidotToHtml(allList);

}


//ページネームを成型する
function replasticPageName(sentence){
    var HomeTopBase = "http://ja.scp-wiki.net/";
    var startDomain = sentence.indexOf(HomeTopBase);
    if(startDomain >= 0){
        sentence = sentence.substring((HomeTopBase.length+startDomain),sentence.length);
    }
    //最初の/を除去
    if(sentence.charAt(0)=="/")sentence = sentence.substring(1,sentence.length);
    //末尾のスペースを除去
    while(sentence.charAt(sentence.length-1)==" ")sentence = sentence.substring(0,sentence.length-1);
    sentence = sentence.replace(/[^a-zA-Z0-9:\]\[]/g, "-");
    while(sentence.match(/\-\-/g)){
    sentence = sentence.replace(/\-\-/g, "-");
    }
    return sentence;
}

</script>
[[/html]]
[[/module]]
[[/div]]


[[include credit:start |mode=no-rate]]

**タイトル:** SCP作者検索
**著者:** SCP財団
**作成年:** 2017
----
本ページはSCPコミュニティのために作成され、SCP財団に帰属します。本ページの管理は[[[meet-the-staff-jp|サイトスタッフ]]]に委任されています。

[[include credit:end]]

+ 説明
指定したSCP記事の作者名を検索します。

JP以外のSCP記事については"[[[http://scp-jp.wikidot.com/credits|翻訳記事の著作者一覧]]]"のページを検索して結果を表示します。"翻訳記事の著作者一覧"に作者名が記載されていない場合は検索にヒットしません。

JPの記事についてはListPagesモジュールを使用し、そのページの作成者を作者として表示します。従ってJPにおいては共著及び改稿の表記には対応しておりません。ご了承ください。

+ 使い方
SCP番号入力欄に作者名を調べたいSCP番号を入力し、"検索"ボタンを押すかエンターキーを押してください。001とそれ以外のSCPで動作が異なるのでご留意ください。

++ 一般SCP
半角のカンマ（,）で区切って複数のSCPを同時に検索する事ができます。例として下記のURLで表示されるページのSCP番号入力（検索ワード）をご覧ください。
http://ja.scp-wiki.net/scpauthorssearch/OriginalSearch/SCP-106,SCP-173,SCP-682 

++ 各支部の001
単独でしか検索する事ができません。検索語その支部の001提言のリストが表示されますので作者名を見たい001提言の名前をクリックしてください。

+ その他
わからない事やバグと思われる動作の報告はこのページのディスカッションにお願いします。バグ報告の場合は検索したSCP番号（検索した語句をそのままコピペするのが望ましい）を記述してくれると助かります。
[!--
[[code type="javascript"]]
//メタタイトルもしくはリンク文に異なるSCP番号があった際の検索を回避する
function removeDummyNumber(name,allList){
    //pagenameが一致したindexOf及び加工後のテキストデータを返す
    //返って来るindexOfの値は加工後のテキストデータに対する値である事に注意
    var search = false;
    var TruthNumber = false;
    var testList = "";
    var resultSearch = {
    	index:-1,
    	list:""
    }
    //テキストから該当の検索語句が見つかった場合その行が本当に正しい行か判定を行う
    var startPoint = allList.indexOf(name);
    if(startPoint >= 0){
    	search= true;
    }
    
    while(search){
    	for(var i = startPoint;i >= 0;i--){
    		if(allList.charAt(i) == " " || allList.charAt(i) == "|"){
    			//検索該当行が[pagename pagetitle]か[[[pagename|pagetitle]]]の形式の場合pagenameの検査を行う
    			testList = allList.substring(0,i);
    			if(testList.indexOf(name) >= 0 || testList.indexOf(name.toLowerCase()) >= 0){
    				//一致していた場合検査を終了する
    				search = false;
    				TruthNumber = true;
    				break;					
    			}else{
    				//pagenameが一致しない場合検索該当箇所より上部のテキストを削除し、また下方検索を行う。
    				allList = allList.substring(startPoint+name.length,allList.length);
    				startPoint = allList.indexOf(name);
    				if(startPoint < 0){
    					search = false;
    				}
    			}
    		}else if(allList.charAt(i) == "["){
    			//リンク文章が含まれていない場合検査を終了する
    			search = false;
    			TruthNumber = true;
    			break;
    		}
    	}

    }
    if(TruthNumber){
    	//pagenameが一致する行を見つけた場合その結果を格納する
    	resultSearch.index = startPoint;
    	resultSearch.list = allList;
    }
    //値を返す
    return resultSearch;

}

//100未満のSCP番号に対して、もし文頭に0の文字がついていない場合、付け足す
function addPrefixZeroForSCP(originalText){
    if(isNullOrWhiteSpace(originalText)){
    	return originalText;
    }
    //SCP番号格納セクション
    var SCPNumberSection = 1;
    
    //SCP番号をセクションごとに分解
    var analysisSCP = originalText.split("-");
    if(analysisSCP.length < 2){
    	return originalText;
    }
    //多くの場合のSCP番号格納セクション部から余白を除去
    analysisSCP[SCPNumberSection] = analysisSCP[SCPNumberSection].trim();
    analysisSCP[SCPNumberSection] = analysisSCP[SCPNumberSection].toUpperCase();
    
    //SCP-[支部]表記の支部
    var middleBranch = ["CN","PL","ES"];
    //上記の支部のSCPであるか検索
    for(var i = 0;i < middleBranch.length;i++){
    	if(analysisSCP[SCPNumberSection] == middleBranch[i]){
    		//中間に支部名があるSCPの場合番号格納セクションを更新する
    		SCPNumberSection = 2;
    		break;
    	}
    }
    if(isNullOrWhiteSpace(analysisSCP[SCPNumberSection])){
    	return originalText;
    }
    //番号変換を試みる
    var testNan = Number(analysisSCP[SCPNumberSection]);
    //番号変換が不可能な場合、値が100以上である場合、100未満でなおかつ3文字以上の文字列である場合処理を終える
    if(isNaN(testNan)){
    	return originalText;
    }
    if(testNan >= 100){
    	return originalText;
    }
    if(analysisSCP[SCPNumberSection].length >= 3){
    	return originalText;
    }
    
    //番号格納部の文頭に"0"を付けたし返す
    while(analysisSCP[SCPNumberSection].length < 3){
    	analysisSCP[SCPNumberSection] = "0" + analysisSCP[SCPNumberSection];
    }
    return analysisSCP.join("-");

}

//対象文字列がnullもしくは空白かを判定する
function isNullOrWhiteSpace(text){
    if(text == undefined){
    	return true;
    }
    if(typeof(text) != 'string'){
    	return true;
    }
    if(text == null){
    	return true;
    }
    var testText = text.split(" ").join("");//半角スペースを除去
    testText = testText.split("　").join("");//全角スペースを除去
    return (testText.length == 0);
}
[[/code]]
[[code type="javascript"]]
//検索結果表示に使う規定文字列

//検索結果表示に使う改行コード
var ResultWrap = "<br />\n";
var ResultWrap2 = "<br />\n<br />\n";

//検索結果該当なしの場合の規定値
var nonHitResult = "SCP財団に該当なし" + ResultWrap2;
var nonHitResult2 = "SCP財団に該当なし" + ResultWrap;
[[/code]]
[[code type="javascript"]]
//各支部におけるSCP番号パターン（正規表現）を格納
var SCPVarietyPatternRegex = {
    "Normal":{
    	"KO":new Array(),
    	"RU":new Array(),
    	"DE":new Array(),
    	"FR":new Array(),
    	"IT":new Array(),
    	"TH":new Array(),
    	"UA":new Array(),
    	"PT":new Array()
    },
    "Joke":{
    	"KO":new Array(),
    	"RU":new Array(),
    	"DE":new Array(),
    	"FR":new Array(),
    	"IT":new Array(),
    	"TH":new Array(),
    	"UA":new Array(),
    	"PT":new Array()	
    },
    "ARC":{
    	"KO":new Array(),
    	"RU":new Array(),
    	"DE":new Array(),
    	"FR":new Array(),
    	"IT":new Array(),
    	"TH":new Array(),
    	"UA":new Array(),
    	"PT":new Array()
    },
    "Decommissioned":{
    	"KO":new Array(),
    	"RU":new Array(),
    	"DE":new Array(),
    	"FR":new Array(),
    	"IT":new Array(),
    	"TH":new Array(),
    	"UA":new Array(),
    	"PT":new Array()
    }
}


//渡された文字列がどの支部のSCPか、及び各支部のURLを返す
function getSCPAllBranch(targetparam){
    var resultObject = {
    	url:"http://www.scp-wiki.net/",
    	branch:"EN"
    }
    var upperParam = targetparam.toUpperCase().trim();
    if(isSCPJPRegex(upperParam) || isSCPJPJRegex(upperParam)){
    	resultObject.url = "http://ja.scp-wiki.net/";
    	resultObject.branch = "JP";
    }
    return getSCPOtherBranchRegex(upperParam,resultObject);

}


//渡された文字列（SCP番号）がSCP-JPかを正規表現で判定する
function isSCPJPRegex(upperSearch){
return (upperSearch.match(/^SCP\-.*\-JP$/) || upperSearch.match(/^SCP\-.*\-JP\-EX$/) || upperSearch.match(/^SCP\-.*\-JP\-ARC$/)
    || upperSearch.match(/^SCP\-.*\-JP\-RE$/)|| upperSearch.match(/^SCP\-.*\-JP\-HW$/)|| upperSearch.match(/^SCP\-.*\-JP\-EX\-RE$/) || upperSearch.match(/^AF\-.*\-JP$/) );
}

//渡された文字列（SCP番号）がSCP-JP-Jかを正規表現で判定する
function isSCPJPJRegex(upperSearch){
    return (upperSearch.match(/^SC.*\-JP\-J$/) || upperSearch.match(/^SC.*\-JP\-EX\-J$/) 
    	|| upperSearch.match(/^SC.*\-JP\-J.$/) || upperSearch.match(/^SC.*\-JP\-J。$/)
    	|| upperSearch.match(/^SCP\-.*\-JP\-J\-RE$/)|| upperSearch.match(/^SCP\-.*\-JP\-EX\-J\-RE$/)
    	|| upperSearch.match(/^SCP\-.*\-JP\-J\-EX$/)|| upperSearch.match(/^SCP\-.*\-JP\-J\-J\-EX$/));
}

function getSCPOtherBranchRegex(targetParam,resultObject){
    if(isTargetBranchsSCPNumber(targetParam,"KO")){
    	resultObject.url = "http://ko.scp-wiki.net/";
    	resultObject.branch = "KO";
    }else if(isTargetBranchsSCPNumber(targetParam,"RU")){
    	resultObject.url = "http://scpfoundation.ru/";
    	resultObject.branch = "RU";
    }else if(isTargetBranchsSCPNumber(targetParam,"FR")){
    	resultObject.url = "http://fondationscp.wikidot.com/";
    	resultObject.branch = "FR";
    }else if(isTargetBranchsSCPNumber(targetParam,"DE")){
    	resultObject.url = "http://scp-wiki-de.wikidot.com/";
    	resultObject.branch = "DE";
    }else if(isTargetBranchsSCPNumber(targetParam,"IT")){
    	resultObject.url = "http://fondazionescp.wikidot.com/";
    	resultObject.branch = "IT";
    }else if(isTargetBranchsSCPNumber(targetParam,"TH")){
    	resultObject.url = "http://scp-th.wikidot.com/";	
    	resultObject.branch = "TH";
    }else if(isTargetBranchsSCPNumber(targetParam,"UA")){
    	resultObject.url = "http://scp-ukrainian.wikidot.com/";	
    	resultObject.branch = "UA";		
    }else if(isTargetBranchsSCPNumber(targetParam,"PT")){
    	resultObject.url = "http://scp-pt-br.wikidot.com/";	
    	resultObject.branch = "PT";
    }else if(targetParam.match(/^SCP\-CN\-/)){
    	resultObject.url = "http://scp-wiki-cn.wikidot.com/";	
    	resultObject.branch = "CN";
    }else if(targetParam.match(/^SCP\-ES\-/)){
    	resultObject.url = "http://lafundacionscp.wikidot.com/";
    	resultObject.branch = "ES";
    }else if(targetParam.match(/^SCP\-PL\-/)){
    	resultObject.url = "http://scp-wiki.net.pl/";
    	resultObject.branch = "PL";
    }
    return resultObject;

}

function isTargetBranchsSCPNumber(targetParam,Branch){
    if(SCPVarietyPatternRegex["Normal"][Branch].length == 0){
    	SCPVarietyPatternRegex["Normal"][Branch] = createSCPBranchSearchPattern(Branch,"");
    }
    for(var i = 0;i < SCPVarietyPatternRegex["Normal"][Branch].length;i++){
    	if(targetParam.match(SCPVarietyPatternRegex["Normal"][Branch][i])){
    		return true;
    	}
    }
    if(SCPVarietyPatternRegex["Joke"][Branch].length == 0){
    	SCPVarietyPatternRegex["Joke"][Branch] = createSCPBranchSearchPattern(Branch,"Joke");
    }
    for(var i = 0;i < SCPVarietyPatternRegex["Joke"][Branch].length;i++){
    	if(targetParam.match(SCPVarietyPatternRegex["Joke"][Branch][i])){
    		return true;
    	}
    }
    if(SCPVarietyPatternRegex["ARC"][Branch].length == 0){
    	SCPVarietyPatternRegex["ARC"][Branch] = createSCPBranchSearchPattern(Branch,"ARC");
    }
    for(var i = 0;i < SCPVarietyPatternRegex["ARC"][Branch].length;i++){
    	if(targetParam.match(SCPVarietyPatternRegex["ARC"][Branch][i])){
    		return true;
    	}
    }
    if(SCPVarietyPatternRegex["Decommissioned"][Branch].length == 0){
    	SCPVarietyPatternRegex["Decommissioned"][Branch] = createSCPBranchSearchPattern(Branch,"Decommissioned");
    }
    for(var i = 0;i < SCPVarietyPatternRegex["Decommissioned"][Branch].length;i++){
    	if(targetParam.match(SCPVarietyPatternRegex["Decommissioned"][Branch][i])){
    		return true;
    	}
    }
    return false;
}

function createSCPBranchSearchPattern(BR,runType){
    //全支部取得の命令の場合、再帰的に全支部の正規表現リストを獲得する
    if(BR == "AllBranch"){
    	getAllBranchRegex();
    	return;
    }
    var preFix = "\-" + BR;
    var End = "$";
    var PatternList = [
    	"\-EX$",
    	
    ];
    var PatternListJoke = [
    	"\-J",
    	"\-EX\-J",
    	"\-J\-EX"
    ];
    var PatternListARC = ["\-ARC"];
    var PatternListDecommissioned = [
    		"\-D",
    		"\-V"
    	];
    var count = 0;
    var NewRegexs = new Array();
    switch(runType){
    	case "Joke":
    		for(count = 0;count < PatternListJoke.length;count++){
    			NewRegexs.push(new RegExp(preFix + PatternListJoke[count] + End));
    		}
    	break;
    	case "ARC":
    		NewRegexs = combineSpecialNumber(PatternListARC,PatternList,0);
    		NewRegexs = NewRegexs.concat(combineSpecialNumber(PatternListARC,PatternListJoke,1));
    	break;
    	case "Decommissioned":
    		NewRegexs = combineSpecialNumber(PatternListDecommissioned,PatternList,0);
    		NewRegexs = NewRegexs.concat(combineSpecialNumber(PatternListDecommissioned,PatternListJoke,1));		
    	break;
    	default:
    		for(count = -1;count < PatternList.length;count++){
    			if(count < 0){
    				NewRegexs.push(new RegExp("^SCP\-.*" + preFix + End));
    			}else{
    				NewRegexs.push(new RegExp("^SCP\-.*" + preFix + PatternList[count] + End));
    			}
    		}
    	break;
    
    }
    return NewRegexs;
    //DやARCの様に他のSCPナンバーの更に末尾につく符号についての正規表現を生成する
    function combineSpecialNumber(SpecialSymbol,targetSymbol,runType){
    	var NewRegexs2 = new Array();
    	var startSearch = 0;
    	if(runType == 0)startSearch = -1;
    	for(var j = startSearch;j < targetSymbol.length;j++){
    		if(j < 0){
    			for(var i = 0;i < SpecialSymbol.length;i++){
    				NewRegexs2.push(new RegExp(preFix + SpecialSymbol[i] + End));
    			}
    		}else{
    			for(var i = 0;i < SpecialSymbol.length;i++){
    				NewRegexs2.push(new RegExp(preFix + targetSymbol[j] + SpecialSymbol[i] + End));
    			}
    		}					
    	}
    	return NewRegexs2;
    }
    
    //各支部のSCP判定パターン（正規表現）を獲得する
    function getAllBranchRegex(){
    	var BranchList = new Array();
    	var RunTypeList = new Array();
    	for(var RunTYpeName in SCPVarietyPatternRegex){
    		RunTypeList.push(RunTYpeName);
    	}
    	for(var branchName in SCPVarietyPatternRegex[RunTypeList[0]]){
    		BranchList.push(branchName);
    	}
    	for(var runCount = 0;runCount < RunTypeList.length;runCount++){
    		for(var BranchCount = 0;BranchCount < BranchList.length;BranchCount++){
    			createSCPBranchSearchPattern(BranchList[BranchCount],RunTypeList[runCount]);
    		}
    	}	
    }
}



[[/code]]
--]