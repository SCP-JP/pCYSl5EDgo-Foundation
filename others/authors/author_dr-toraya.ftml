> + 目次
> [[[/author:dr-toraya|個人ファイルと執筆記事一覧]]]
> [[[/author:dr-toraya/offset/1/page2_limit/1|実績バッジ]]]
> [[[/author:dr-toraya/offset/1/page3_limit/1|THE ORIGIN(2016年エイプリルフール)]]]
> [[[/author:dr-toraya/offset/1/page4_limit/1|THE END(2017年エイプリルフール)]]]
> [[[/author:dr-toraya/offset/1/page5_limit/1|ノベルゲー構文解説]]]

[[module ListPages offset="@URL|0" range="."]]
%%content{2}%%
[[/module]]
[[module ListPages limit="@URL|0" range="." urlAttrPrefix="page2"]]
%%content{3}%%
[[/module]]
[[module ListPages limit="@URL|0" range="." urlAttrPrefix="page3"]]
%%content{4}%%
[[/module]]
[[module ListPages limit="@URL|0" range="." urlAttrPrefix="page4"]]
%%content{5}%%
[[/module]]
[[module ListPages limit="@URL|0" range="." urlAttrPrefix="page5"]]
%%content{6}%%
[[/module]]

[!--
====
+ 個人ファイル

[[include component:image-block 
name=karaage2021a.jpg|
width=300px|
caption=^^近影^^]]

**名前:** 虎屋外郎(とらやういろう)

**セキュリティレベル:** レベル3

**職務:** 人工系オブジェクトの調査、ぬいぐるみ型オブジェクトの収集、超高硬度スコーンの開発

**所在:** サイト-8181および東京ぬいぐるみ研究所

**人物:** 虎屋博士は工業系教育機関の卒業後、株式会社████に就職。20██年4月、████島への出張中にSCP-███-JPに遭遇。財団エージェントによって保護された後、治療、改造、調理、[編集済]が行われました。完治後は財団職員として雇用され、現在に至ります。

虎屋博士は人工系オブジェクトの研究を専門分野としています。特にぬいぐるみ型オブジェクトやKawaii系オブジェクトについては、研究の担当を強く希望するケースが多く、職務に情熱を見せます。ただし意思を持つぬいぐるみ型オブジェクトの研究については、虎屋博士の精神状態の高揚により職務に支障をきたすため、許可されません。

SCP-███-JPの影響により、虎屋博士と[編集済]をした経験のない人物は、虎屋博士の姿が唐揚げに見えるミーム汚染を受けます。虎屋博士が勤務中のサイトで唐揚げを食べる際には、必ず食べる前に唐揚げに一声かけてください。

ミーム汚染の拡大を避ける目的と、自身の健康上の理由により、虎屋博士は平時からガスマスクまたは同様の機能を持つよう改造された狐面を着用しています。エージェント厚木との混同に注意してください。

20██年9月、ミーム汚染を除去する効果を持つマスクが開発されました。狐面を模したこのマスクの着用中のみ、一般の人間も虎屋博士の姿を視認することができます。しかし虎屋博士は「前が見えづらい」という理由で日常ではこのマスクをあまり使用していません。引き続き不審な唐揚げには警戒してください。

虎屋博士の長男、虎屋月餅(げっぺい)氏は、財団の託児所への入所および学校法人プリチャード学院関連施設への進学が予定されています。

虎屋博士はお菓子作りを趣味としていますが、その成果物は基本的に食用には適しません。例として、スポンジケーキは核融合寸前の密度にまで収縮し、スコーンはチタン合金に匹敵する硬度を示しました。本人は通常の材料と手順通りに作成しただけであると供述しています。虎屋博士のお菓子作りにおけるデータは財団の工学チームに転送され、建材または兵器への応用が研究されています。

[[module ListUsers users="."]]
虎屋博士は%%title%%さんを応援しています。
[[/module]] 

**職員のコメント:** 
//いただきます。//-エージェント██
//私の指をしゃぶらないでください。//-虎屋博士

//先日お渡しした実験結果のレポートは読んでいただけましたか？//-██研究員
//唐揚げの間に挟まっていた冊子なら、油でギトギトなので廃棄しました。//-虎屋博士

//なんでコンクリートがタッパーで保管されているんですか？//-██博士
//それはメレンゲクッキーです。//-虎屋博士

====
+ 実績バッジ

[[include :scp.avn.sh:7happy7:achievement-jp-module |a1=true|a2=true|a3=true|a4=true|a5=true|a6=true|a7=true|a8=true|a9=true|a10=true|a11=true|a12=true|a13=true|a14=true|a16=true|a18=true|a20=true|a22=true|a30=true|a31=true|a32=true|a49=true|a50=true|a51=true|a52=true|a54=true|a55=true|a56=true|a57=true|a58=true|a61=true|a62=true|a66=true|a68=true|num=34]]

====

+ THE ORIGIN(2016年エイプリルフール)
[[include component:image-block
|name=chicken
|caption=SCP-███-JP-α
]]

**アイテム番号:** SCP-███-JP

**オブジェクトクラス:** Euclid

**特別収容プロトコル:** SCP-███-JP-αは無力化したため収容不要です。SCP-███-JP-βはプロトコル"トゥルーマンショー"に基づきレベル3の財団職員として雇用し、継続した監視と行動制限下に置きます。

**説明:** SCP-███-JPは科学分析上は異常のないカブトムシです。SCP-███-JPの特異性は、その外見を直接または間接的に人間が観察した場合に発生します。SCP-███-JPを視認した人間は、本来はカブトムシであるSCP-███-JPの姿を雄鶏であるように認識します。触れた場合や匂いを嗅いだ場合も同様に、雄鶏の羽毛、体臭を認識します。しかし持ち上げた場合のみ、不自然に体重が軽いことを認識でき、これによりSCP-███-JPと普通の鶏を識別することができます。

SCP-███-JPは新潟県佐渡島███の小学生により、クヌギ林の木にとまっている状態で発見されました。SCP-███-JPの姿はデジタルカメラで撮影され、地元の広報誌に迷子として紹介されました。それからなんやかんやあって財団エージェント8名による山狩りが行われ、SCP-███-JPは確保、収容されました。

**収容違反記録███-JP-1:** 20██/4/8、SCP-███-JPが収容施設から脱走しました。SCP-███-JPの担当職員は、入室後に「鳥特有のひどいにおい」に耐えかね、収容施設の窓を4cm程度解放しました。SCP-███-JPは外見上は鶏ですが本体は体長6cmのカブトムシであるため、解放された窓から外へ飛び立ちました。担当職員はその後収容室の掃除に集中していたため、SCP-███-JPの収容違反が発覚したのは3時間後のことでした。収容違反報告後ただちに機動部隊"グーニーズ"が招集され、SCP-███-JPの捜索が開始されました。

20██/4/9、SCP-███-JPは無力化し、SCP-███-JP-αに分類されました。SCP-███-JP-αは佐渡島███山に逃げこんだのち、同地でキャンプを行っていた██ ██氏により確保、調理、捕食されました。SCP-███-JP-αを捕食した██氏は、SCP-███-JP-αの影響を受け外見上の姿が「鶏の唐揚げ」に見える特異性を得たため、SCP-███-JP-βに分類されました。調査、実験、調理、レモン汁、マヨネーズ、おろしポン酢、生クリームの結果、いろいろあってSCP-███-JP-βは財団職員として雇用されることが決定しました。SCP-███-JP-βには本名に代わり「虎屋 外郎」のコードネームが与えられました。

====

+ THE END(2017年エイプリルフール)
**アイテム番号:** SCP-TRY-JP

**オブジェクトクラス:** Euclid

**特別収容プロトコル:** SCP-TRY-JPを封印した特別収容サイト-8181は、SCP-TRY-JP分離体自動処置設備を設置した開口部を除き、周囲と入り口のすべてを硬化ベークライトにより完全に封鎖します。自動処置装置により回収したSCP-TRY-JP分離体は実験用サンプルを除き焼却処分してください。SCP-TRY-JPの本体は自己収容状態にあるため収容措置は必要ありません。

**説明:** SCP-TRY-JPはかつて虎屋博士だったものです。2017年█月██日、虎屋博士はサイト-8181の厨房の使用許可を申請しました。目的は████氏の誕生日ケーキを焼くためであったと申請書に記入されています。使用申請は事前に使用する食材を申告することを条件に許可され、█月██日 20:45に虎屋博士は厨房の使用を開始しました。

虎屋博士が厨房を使用し始めてから6時間後、厨房横の食堂で休憩していた██研究員が「できた！」という虎屋博士の声を聞いています。次の瞬間、爆発的に膨張し厨房と食堂を埋め尽くしたスポンジケーキにより、██研究員は食堂から猛烈な勢いではじき出されました。厨房に設置された監視カメラは、スポンジケーキを掘り進み天井付近から顔を出した虎屋博士を記録していました。

虎屋博士と██研究員からの通報を受け、直ちに機動部隊ろ-5"陰陽師"が派遣され、スポンジケーキの除去が行われました。サンプル採取されたスポンジケーキを接触したD-2118は「美味しかったよ」と評価しました。その翌日、D-2118は交通事故で死亡しました。

機動部隊員の所持していた通信機は、機動部隊がスポンジケーキを掘り進み厨房に到達する寸前に「チーン」というオーブンの音を捉えていました。また直後には虎屋博士が「もう一個焼いたんだった」と呟く声が伝えられました。数秒の沈黙ののち、オーブンの蓋が吹き飛ぶ音と、機動部隊長の「撤退！」と叫ぶ声、および緊急サイト放棄放送が記録されています。再び膨張を開始したスポンジケーキは時速12kmでサイト-8181を駆け巡り、およそ██分でサイト-8181を埋め尽くしました。 

サイト-8181の窓や扉から触腕のごとく伸び空へと向けてその身をよじるスポンジケーキは、冷え始めると徐々に運動速度を緩め、やがて自重により崩壊しました。しかしサイト-8181からは依然としてゆっくりとスポンジケーキが溢れ出しており、後に開口部の削減と自動処置装置の設置が決定されました。

事案発生の翌日行われた内部探査で、虎屋博士はサイト-8181の厨房で生存していることが確認されました。しかし虎屋博士は通信に応じず、スポンジケーキをちぎって作った身長80cm程度の人形に向けて話かけることをやめませんでした。その後48日の間、救出作業と並行して観察が続けられましたが、虎屋博士が補給、睡眠、排泄を必要としていないこと、ヒゲや髪の伸長などの代謝が見られないこと、掘削した分スポンジケーキが膨張して救出作業が進められないことから、日本支部理事は虎屋博士の救出中止とサイト-8181の放棄を決定し、虎屋博士をSCP-TRY-JPに指定しました。

====
+ ノベルゲー構文解説
[[=]]
まずはこちらをご覧ください

[[iframe http://scp-jp.wikidot.com/author:dr-toraya/code/2 width="100%" height="500px"  scrolling="no"]]

こんなノベルゲーライクなものが作れる
[[size 150%]]「ノベルゲー構文」[[/size]]
のご紹介です。

[[/=]]

+ 作り方概要

# このページのソースをあなたのサンドボックスにコピペしてsaveする
# ソースに書かれているurlを修正する
# シナリオを書く
# 完成！

+ コピペ用コード
[[iframe http://scp-jp.wikidot.com/author:dr-toraya/code/5 width="100%" height="400px"  scrolling="yes"]]

+ 作り方
++ (1) コピペ用コードのコピー
前述のコピペ用コードをあなたのページにコピペしてSAVEします。

**__注意:__** サンドボックス3の新規作成ページで作業を行う場合、必ず1度saveしてください。saveしないと、新規作成ページではURLが確定しておらず、以降の作業が行えません。

++ (2) IFRAMEの修正
次の部分を修正します。

> @@[[iframe <ここにhttp://で始まるページのURL>/code/1 width="100%" height="500px"  scrolling="no"]]@@

ページのURLが「http://scp-jp.wikidot.com/author:dr-toraya」の場合、次のように記載します。

> @@[[iframe http://scp-jp.wikidot.com/author:dr-toraya/code/1 width="100%" height="500px"  scrolling="no"]]@@

++ (3) 1つ目のCODEブロックの修正
1つ目のcodeブロックに、IFRAMEで表示するHTMLの内容を書きます。codeブロック内の2つ目のscriptタグに、ページ名を記載してください。ページのURLが「http://scp-jp.wikidot.com/author:dr-toraya」の場合、次のように記載します。

> @@   <!-- ここにこのページの2番目のCodeブロックのURLを入れてください -->@@
> @@   <script src='/author:dr-toraya/code/2'></script>@@


++ (4) 2つ目のCODEブロックの修正
2つ目のcodeブロック(javascript)の変数texturlに、シナリオのURLを記載します。ページのURLが「http://scp-jp.wikidot.com/author:dr-toraya」の場合、次のように記載します。

> @@let texturl='/author:dr-toraya/code/3';@@

また、変数ASSETSに、使用する画像につける名前とURLを記載します。記載形式は次です。

>     '名前' : '画像のURL',

++ (5) 3つ目のCODEブロックの修正
3つ目のコードブロックにシナリオを書きます。
書き方は後述のリファレンスを参照してください。

++ (6) SAVEして完成！

[[=]]
[[size 150%]]ね？簡単でしょう？[[/size]]
[[/=]]

+ シナリオの書き方のリファレンス
+++ @で始まらない行
テキストボックスに表示します。自動的に折り返します。改行が入ると次のページになります。
先頭が [ で始まる場合、[]で囲んだ部分をキャラIDとし、指定したキャラを会話中にします。（名前を表示して画像を強調します。）
先頭が " で始まる場合、先頭の"を削除して、残りを普通の文字列として使用します。

**（指定例）:**
> これは普通のテキスト。
> [キャラ1]これはキャラ1を会話中に指定しする。テキストで[]内は表示されない。
> "[たとえば]こう書いた場合は先頭の"だけを取り除く。

+++ @talker;id=<キャラID>;imgid=<画像ID>;name=<キャラ名>
テキスト表示時にアクティブな画像と名前を指定します。
テキストを記載する前に@talkerを指定する必要があります。

**（指定例）:**
> @talker;id=キャラ1;imgid:@left;name=キャラ1の名前

**__注意__:** 現在のところimgidは省略できません。そのうち対応します。

+++ @text;text:<表示文字列>[;talker:<キャラID>][;next:auto][;size:<ピクセル数>][;color:<色指定>][;speed:<表示速度>]
表示文字列をテキストボックスに表示します。
基本的に@で始まらない行と同様ですが、先頭文字の解析はしません。
**talker:** キャラIDを指定した場合、指定したキャラを会話中にします。（名前を表示して画像を強調します。）
**next:** autoを指定した場合、文章表示後に自動的に次の行を開始します。
**size:** 文字サイズをピクセル数で指定します。デフォルト値は32です。この指定は次の行に引き継がれません。
**color:** 文字の色を16進数のrgb形式(例:#FFF)またはrgba形式(例:rgba(255,255,255,1.0))で指定します。この指定は次の行に引き継がれません。
**speed:** テキストの表示速度(1文字ごとの表示間隔)をミリ秒単位で指定します。この指定は次の行に引き継がれません。

**（指定例）:**
> [キャラ1]キャラ1のセリフ
> @text;talker:キャラ1;text:キャラ1のセリフ
> 上記２つは同じ意味。(ちなみにこの行にも上の会話中キャラが継続して適用される）

+++ @asset;id=<0以上の整数>
ASSETSから読み込む要素の番号を指定してください。
@imgを指定する前に必ず実施しておく必要があります。

**（指定例）:**
> @asset;id=0

+++ @img;position:{bg|right|center|left|<X座標>[,<Y座標>]}[;name:<ASSETSの名前>][;scale:<画像サイズ>][;id:<画像ID>][;mirror:x]
画像を表示または削除します。一番シンプルな書き方は次です。画像を表示して、削除します。

> @img;name=画像1;position:left
> @img;id:@left

**position:** bgを指定すると背景、right、left、centerは立ち絵です。rightだけ左右反転します。X座標は画面中央が0、値を大きくすると右へ動きます。Y座標は画像下端がテキストウィンドウにピッタリくっつく位置が0、値を大きくすると下へ動きます。idの指定がない場合、画像idには@bg、@right、@left、@centerが自動的に付与されます。
**name:** ASSETSで指定した画像の名前を指定します。省略した場合、idが一致する画像に対する操作であると解釈します。
**scale:** 下端中央を中心に、画像を拡縮します。1.0が等倍、0.5が半分、2.0が倍のサイズです。省略値は1.0です。
**id:** 画像idはキャラと関連付けるための値です。@talkerのimgidに画像idを指定すると、指定のキャラが会話中になったときにこの画像が強調表示されます。positionにbg、right、left、centerを指定した場合は省略できます。
**mirror:** xを指定すると、画像の中心を軸として左右反転します。idが'@right'の場合、自動的にxが指定されます。

**画像の削除について:** idを指定し、それ以外の属性を省略すると、画像を削除します。このとき、@talkerの指定も解除されるので、削除した画像を再表示する際には、もう一度@talkerで関連付ける必要があります。

**（指定例）:**
> @img;position:left;name:画像1
> @img;id:@left;position:0,-300;name:画像1

+++ @title;main:<タイトル>;sub:<サブタイトル>
タイトル画面を表示します。画面のどこかをタッチするとタイトル画面を閉じます。

**main:** メインタイトルを指定します。
**sub:** サブタイトルを指定します。表示しない場合は空にしてください。

+++ @chapter;flag:<ジャンプ先フラグ>;text:<テキスト>
チャプター画面で表示するチャプターボタンのテキストとジャンプ先を指定します。指定する場合、
テキストウィンドウと名前ウィンドウの内容はすべて削除されます。@configで指定した設定は引き継がれます。
**flag:** @flagで指定するidを指定してください。
**text:** チャプター選択ボタンに表示するテキストを指定してください。

+++ @goto;id:<フラグ名>
指定した@flagまでジャンプします。後ろには戻れません。

**（指定例）:**
> @goto;id:flag1

+++ @flag;id:<フラグ名>
@gotoや@selectのジャンプ先です。

**（指定例）:**
> @flag;id:flag1

+++ @select;[text:<表示テキスト>][;flag:<フラグ名>]
選択肢です。「flag」がない「@select」がくるとそれまでに書いた選択肢を書いたボタンを列挙します。ボタンを選択すると<フラグ名>に指定したidのフラグまでジャンプします。後ろには戻れません。flagがない行にtextを指定しないでください（そのうち対応します）

**（指定例）:**
> @select;text:選択肢1;flag:flag1
> @select;text:選択肢2;flag:flag2
> @select;text:選択肢3;flag:flag3
> @select;

+++ @config;key=<キー>;value=<値>
さまざまな設定を変更します。
次に一覧を示します。

|| キー || 初期値 || 説明 ||
|| talker_shadow || true || 会話中のキャラを強調する場合true。 ||
|| bgcolor || #000 || 背景色を16進数のrgb形式で指定する。 ||
|| font_size || 32 || メッセージウィンドウのテキストのサイズを指定します。 ||
|| font_color || #FFF || メッセージウィンドウのテキストのサイズを指定します。rgb形式またはrgba形式で指定してください。 ||

+ 色指定の形式について
+++ rgb形式
「#rgb」の形式で指定します。
rは赤、gは緑、bは青です。それぞれ0～Fを指定できます。
例…黒:#000、白:#FFF、赤:#F00、緑:#0F0、青:#00F

+++ rgba形式
「rgba(r, g, b, a)」の形式で指定します。
rは赤、gは緑、bは青です。それぞれ0～255の整数を指定します。
aは透明度です。0～1の小数を指定します。0は透明、1は不透明です。
例…黒:rgba(0,0,0,1)、白:rgba(255,255,255,1)、半透明の赤:rgba(0,255,0,0.5)

+ 注意事項
* いろんなバグが残っているおそれがあります。見つけたら教えてください。
* 機能が色々足りていません。要望を教えてください。
* シナリオやcodeブロックを複数のサイトに分けることはできません。例えば財団サイトとサンドボックス3の両方にまたがって置くことは多分できません。画像ファイルは別のサイトからでも参照可能です。

+ 補足
画像を大量に準備する場合、そのシーンで使用する画像と使用しない画像が出てくるでしょう。その場合、javascriptの配列を使い、image要素を複数記載し、読み込み画像をグループ分けすることができます。

> @@let ASSETS = [@@
> @@  {@@
> @@    image: {@@
> @@     '名前' : 'グループ0の画像のURL',@@
> @@    },@@
> @@  },@@
> @@ {@@
> @@    image: {@@
> @@      '名前' : 'グループ1の画像のURL',@@
> @@    },@@
> @@  },@@
> @@];@@

それぞれのグループの画像の読み込みはシナリオの「@asset;id=グループ番号」で指定します。グループ番号は0から始まることに注意してください。例えば上記のグループ0を読み込む場合は次を指定します。

> @asset;id=0

====
--]

[[tabview]]
[[tab メモ]]
ページ分け構文を使うと、コメントもリストモジュールも使えないらしい。
[[/tab]]
[[tab 執筆記事]] 
+ 執筆記事
**SCP:** 
[[module ListPages created_by="dr_toraya" separate="no" limit="250" perPage="250" tags="+scp +jp" order="created_at" category="*"]]
# (%%created_at|%y/%m/%d%%) %%title_linked%% (評価: %%rating%%)
[[/module]]

**Tale:** 
[[module ListPages created_by="dr_toraya" separate="no" limit="250" perPage="250" tags="tale +jp" order="created_at" category="*"]]
# (%%created_at|%y/%m/%d%%) %%title_linked%% (評価: %%rating%%)
[[/module]]

**アートワーク:** 
[[module ListPages created_by="dr_toraya" separate="no" limit="250" perPage="250" tags="アートワーク +jp" order="created_at" category="*"]]
# (%%created_at|%y/%m/%d%%) %%title_linked%% (評価: %%rating%%)
[[/module]]

+ 出演作一覧
[[module ListPages separate="no" limit="250" perPage="250" tags="虎屋博士" order="created_at desc" category="*"]]
# %%title_linked%% by %%created_by%% (%%created_at|%y/%m/%d%%) (%%rating%%)
[[/module]]
[[/tab]]
[[/tabview]]

[!-- code 1 --]
[!--
[[code type="javascript"]]

phina.globalize();

phina.define('ConfigObject', {
  init: function(key, defaultValue){
    this.key = key;
    this.defaultValue = defaultValue;
  }
});


const CONFIG_TALKER_SHADOW = ConfigObject('talker_shadow', 'true');
const CONFIG_BGCOLOR = ConfigObject('bgcolor','#000');
const CONFIG_FONT_SIZE= ConfigObject('font_size',32);
const CONFIG_FONT_COLOR= ConfigObject('font_color','#FFF');
const CONFIG_TEXT_SPEED = ConfigObject('text_speed',30);

const MESSAGE_AREA_Y = 650;

var elemMan = null;

phina.define('LongPushButton', {
  superClass: 'phina.ui.Button',
  init: function(options){
    options = (options || {}).$safe(LongPushButton.defaults);
    this.superInit(options);
    
    this.pushFrame=0;
    this.on('pointstay', function(app){
      this.pushFrame++;
      if( this.pushFrame > 30 && this.pushFrame % 4 === 0){
        this.onpush();
      }
    });
    this.on('pointend', function(app){
      this.pushFrame = 0;
    });
  },
  
  _static: {
    defaults: {
    },
  },
});

/**
 * Animation Button
 */
phina.define('AnimationButton', {
  superClass: 'phina.ui.Button',
  init: function(options){
    options = (options || {}).$safe(LongPushButton.defaults);
    this.superInit(options);
  },

  _static: {
    defaults: {
    },
  },
});

/**
 * Title Scene
 */
phina.define('TitleScene',{
  superClass: 'DisplayScene',
  init: function(){
    // 親クラス初期化
    this.superInit();
    // 背景を半透明化
    this.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    
    var scene = this;
    
    // Main Title
    this.mainTitleArea = Label({
      text:'Chapter select',
      width:scene.width,
      fill:'#FFF',
      stroke:'#000',
      strokeWidth:6,
      padding:0,
      align: 'center',
      fontSize: 64,
    }).addChildTo(this);
    this.mainTitleArea.setPosition(scene.gridX.center(), scene.gridY.center(-2));

    // Sub Title
    this.subTitleArea = Label({
      text:'Chapter select',
      width:scene.width,
      fill:'#FFF',
      stroke:'#000',
      strokeWidth:6,
      padding:0,
      fontSize: 32,
      align: 'center',
    }).addChildTo(this);
    this.subTitleArea.setPosition(scene.gridX.center(), scene.gridY.center(-1));

    // Sub Title
    this.nextText = Label({
      text:'Toutch to start',
      width:scene.width,
      fill:'#FFF',
      stroke:'#000',
      strokeWidth:6,
      padding:0,
      fontSize: 40,
      align: 'center',
    }).addChildTo(this);
    this.nextText.setPosition(scene.gridX.center(), scene.gridY.center(+4));

    // Next Button (transparent)
    this.nextBtn = AnimationButton({
      text:'',
      fill: 'transparent',
      width: scene.width,
      height: scene.height,
    }).addChildTo(this);
    this.nextBtn.setPosition(scene.gridX.center(), scene.gridY.center());
    this.nextBtn.onpush = function() {
      // シーンを削除する
      scene.exit();
      // 次へ進める
      elemMan.next();
    };
  },
});

/**
 * Chapter Scene
 */
phina.define('ChapterScene',{
  superClass: 'DisplayScene',
  init: function(){
    // 親クラス初期化
    this.superInit();
    // 背景を半透明化
    this.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    
    var scene = this;
    
    //Caption
    this.textArea = LabelArea({
      text:'Chapter select',
      width:scene.width,
      height:300,
      fill:'#FFF',
      stroke:'#000',
      strokeWidth:6,
      padding:0,
      fontSize: 40,
    }).addChildTo(this);
    this.textArea.setOrigin(0,0);
    this.textArea.setPosition(10,10);

    // Close Button
    this.chapterBtn = AnimationButton({
      text:'x',
      width: 50,
      height: 50,
    }).addChildTo(this);
    this.chapterBtn.setOrigin(1,0);
    this.chapterBtn.setPosition(scene.width-10,10);
    this.chapterBtn.onpush = function() {
      // シーンをpushする
      scene.exit();
    };
    
    // TitleButton
    this.titleBtn = AnimationButton({
      text:'Back to Title',
      width: scene.width - 60,
      height: 60,
    }).addChildTo(this);
    this.titleBtn.setOrigin(0,0);
    this.titleBtn.setPosition(10,80);
    this.titleBtn.onpush = function() {
      scene.exit();
      elemMan.reset();
    };

    // チャプターボタン
    var i=0;    
    elemMan.chapterMap.forEach(function (value, key) {
      var btn = AnimationButton({
        text: value.text,
        width: scene.width - 60,
        height: 60,
      }).addChildTo(scene);
      btn.setOrigin(0,0);
      btn.setPosition(10,200 + i*80);
      btn.onpush = function() {
        scene.exit();
        elemMan.reset(value.flag);
      };
      i++;
    });
  },
});


/**
 * Main Scene
 */ 
phina.define('MainScene',{
  superClass: 'DisplayScene',
 
  init: function(){
    this.superInit();
    
    let scene = this;
    try{
      this.backgroundColor = CONFIG_BGCOLOR.defaultValue;
      
      this.bgGroup = DisplayElement().addChildTo(this);
      this.spriteGroup = DisplayElement().addChildTo(this);
      this.spriteTopGroup = DisplayElement().addChildTo(this);
      this.uiGroup = DisplayElement().addChildTo(this);
  
      this.spriteMap = new Map();
      this.textshow = '';
      this.textfull = '';
      this.textTimer = 0;
      this.textTimerInterval = CONFIG_TEXT_SPEED.defaultValue;
   
      // Main Text Window
      this.textArea = LabelArea({
        text:'now loading...',
        width:scene.width-18,
        height:300,
        fill:'#FFF',
        stroke:'#000',
        strokeWidth:6,
        padding:0,
        fontsize: CONFIG_FONT_SIZE.defaultValue,
      });
      this.textArea.setOrigin(0,0);
      this.textArea.setPosition(10, MESSAGE_AREA_Y);
    
      // Main Text Window Back Ground
      this.textBg = RectangleShape({
        width: this.textArea.width+10,
        height: this.textArea.height+10,
        fill: '#222244',
        padding:0,
      });
      this.textBg.setPosition(this.textArea.x-5,this.textArea.y-5);
      this.textBg.setOrigin(0,0);
      this.textBg.alpha = 1.0;
      
      // Name Window
      this.nameArea = LabelArea({
        text:'',
        width:200,
        height:30,
        fill:'#FFF',
        stroke:'#000',
        strokeWidth:6,
        padding:0,
      });
      this.nameArea.setOrigin(0,0);
      this.nameArea.setPosition(this.textArea.x,this.textArea.y-45);
      this.nameArea.hide();
  
      // Name Window Back Ground
      this.nameBg = RectangleShape({
        width: this.nameArea.width+10,
        height: this.nameArea.height+10,
        fill: '#222244',
        padding:1,
        strokeWidth:1,
      });
      this.nameBg.setOrigin(0,0);
      this.nameBg.setPosition(this.nameArea.x-5,this.nameArea.y-5);
      this.nameBg.alpha = 1.0;
      this.nameBg.hide();
  
      // add to UI group
      this.textBg.addChildTo(this.uiGroup);
      this.textArea.addChildTo(this.uiGroup);
      this.nameBg.addChildTo(this.uiGroup);
      this.nameArea.addChildTo(this.uiGroup);
  
      // Text next Button
      this.nextBtn = LongPushButton({
        text:'next',
        width: this.textArea.width+20,
        height: this.textArea.height+20,
      }).addChildTo(this.uiGroup);
      this.nextBtn.setOrigin(0,0);
      this.nextBtn.setPosition(this.textArea.x,this.textArea.y);
      this.nextBtn.alpha = 0.0;
      this.nextBtn.onpush = function(){
        if( scene.textshow.length < scene.textfull.length){
          scene.textshow = scene.textfull;
          scene.textArea.text = scene.textshow;
        }else{
          if(elemMan != null){
            elemMan.pushNext(scene);
          }
        }
      }
  
      // Text Next Triangle
      this.nextTriangle = TriangleShape({
        fill:'#FFF',
        stroke:'transparent',
        radius: 16,
      }).addChildTo(this.uiGroup);
      this.nextTriangle.setPosition(this.textArea.x + this.textArea.width-16,this.textArea.y + this.textArea.height-16);
      this.nextTriangle.rotation = 180;
      this.nextTriangle.hide();
  
      // Chapter Button
      this.chapterBtn = AnimationButton({
        text:'C',
        width: 50,
        height: 50,
      });
      this.chapterBtn.addChildTo(this.uiGroup);
      this.chapterBtn.setOrigin(1,0);
      this.chapterBtn.setPosition(scene.width-10,10);
      this.chapterBtn.onpush = function() {
        // シーンをpushする
        scene.app.pushScene(ChapterScene());    
      };
    }catch(error){
      this.showError('', error);
    }
  
    try{
      //Runstantでは動作しない
      fetch(texturl , {})
      .then(response => response.text())
      .then(text => {
        console.log('fetch success.');
        if (typeof debugtext !== 'undefined'){
          scene.scenario = debugtext;
        }else{
          scene.scenario = text;
        }
        elemMan = ElemManager(scene);
        elemMan.next();
      }).catch(error => {
        console.log('fetch error.');
        if(this.textArea != null){
          this.textArea.text = 'fetch error.\r\n' + error.stack;
        }
        scene.scenario = debugtext;
        elemMan = ElemManager(scene);
        elemMan.next();
      });
    }catch(error){
      this.showError('', error);
    }

  },

  update: function(app){
    try{
      var len1 = this.textshow.length;
      var len2 = this.textfull.length;
      if( len1 < len2){
        // short
        this.textTimer += app.deltaTime;
        while((this.textshow.length < this.textfull.length) && (this.textTimer >= this.textTimerInterval)){
          this.textTimer -= this.textTimerInterval;
          this.textshow += this.textfull[this.textshow.length];
        }
        this.nextTriangle.hide();
        this.textArea.text = this.textshow;
      }else{
        // full
        if( elemMan != null && elemMan.currentElem != null 
          && elemMan.currentElem.textnext == 'auto')
        {
          // 自動テキスト送り
          elemMan.next();
        }
        if( app.frame % 8 === 0){
          if(this.nextTriangle.visible){
            this.nextTriangle.hide();
          }else{
            this.nextTriangle.show();
          }
        }
      }
    }catch(error){
      this.showError('', error);
    }
  },
  
  updateText: function(newtext){
    try{
      if(elemMan.tempTextSize != null){
        if(elemMan.tempTextSize.length == 0){
          this.textArea.fontSize = elemMan.configMap.get(CONFIG_FONT_SIZE.key);
          elemMan.tempTextSize = null;
        }else{
          this.textArea.fontSize = elemMan.tempTextSize;
          elemMan.tempTextSize = '';
        }
      }
      if(elemMan.tempTextColor != null){
        if(elemMan.tempTextColor.length == 0){
          this.textArea.fill = elemMan.configMap.get(CONFIG_FONT_COLOR.key);
          elemMan.tempTextColor = null;
        }else{
          this.textArea.fill = elemMan.tempTextColor;
          elemMan.tempTextColor = '';
        }
      }
      if( elemMan.tempTextSpeed != null ){
        if( elemMan.tempTextSpeed < 0 ){
          this.textTimerInterval = elemMan.configMap.get(CONFIG_TEXT_SPEED.key);
          elemMan.tempTextSpeed = null;
          console.log('###DEBUG### text speed end. speed='+this.textTimerInterval);
        }else{
          this.textTimerInterval = elemMan.tempTextSpeed;
          elemMan.tempTextSpeed = -1;
          console.log('###DEBUG### text speed Start. speed='+this.textTimerInterval);
        }
      }
      this.textfull = newtext;
      this.textshow = '';
      this.textArea.text = '';
    }catch(error){
      this.showError('', error);
    }

  },

  updateSprite: function(key, sprite){
    try{
      var temp = this.spriteMap.get(key);
      if( temp != null){
        temp.remove();
        this.spriteMap.delete(key);
      }
      this.spriteMap.set(key, sprite);
    }catch(error){
      this.showError('', error);
    }
  },
  
  updateName: function(name){
    try{
      if(name != null ){
        this.nameArea.text = name;
        this.nameArea.show();
        this.nameBg.show();
      }else{
        this.nameArea.hide();
        this.nameBg.hide();
      }
    }catch(error){
      this.showError('', error);
    }
  },
  
  updateTalker: function(imgid){
    try{
      var active;
      var sprite;
      var index = -1;
      if( elemMan.configMap.get(CONFIG_TALKER_SHADOW.key) != 'true' ){
        // talkerを使用しない
        return;
      }
      if(imgid == null){
        for( var i=0 ; i < this.spriteGroup.children.length ; i++ ){
          this.spriteGroup.children[i].alpha = 0.7;
        }
        return;
      }
  
      sprite = this.spriteMap.get(imgid);
      for( var i=0 ; i < this.spriteGroup.children.length ; i++ ){
        if( this.spriteGroup.children[i] == sprite){
          console.log('updateTalker(' + imgid + ')');
          index = i;
          this.spriteGroup.children[i].alpha = 1.0;
        }else{
          this.spriteGroup.children[i].alpha = 0.7;
        }
      }
      if(index >= 0){
        // top level
        this.spriteGroup.children.swap(index, this.spriteGroup.children.length-1);
      }
    }catch(error){
      this.showError('', error);
    }
  },
  
  showError: function(msg, error){
    if(this.textArea == null){
      return;
    }
    this.textArea.fontSize = 22;
    this.textArea.setPosition(0,0);
    this.textArea.width = this.width;
    this.textArea.height = this.height;
    this.textArea.text = msg + '\r\n' + error.stack;
  }
});




/**
 * Element Manager
 */
phina.define( 'ElemManager', {
  
  init: function(scene){
    this.mainScene = scene;
    try{
      if( this.mainScene.scenario.indexOf('\r\n') >= 0 ){
        this.lines = this.mainScene.scenario.split('\r\n');
      }else if( this.mainScene.scenario.indexOf('\r') >= 0 ){
        this.lines = this.mainScene.scenario.split('\r');
      }else{
        this.lines = this.mainScene.scenario.split('\n');
      }
      this.nextFlag = false;
      this.loadedAsset = -1;
      this.index = 0;
      this.currentElem = null;
      this.pushable = false;
      this.gotoFlag = null;
      this.selectArray = [];
      this.configMap = new Map();
      this.talkerMap = new Map();
      this.chapterMap = new Map();
      this.variableMap = new Map();
      this.tempTextSize = null;
      this.tempTextColor = null;
      this.tempTextSpeed = null;
  
      // configのdefault
      this.configMap.set(CONFIG_TALKER_SHADOW.key, CONFIG_TALKER_SHADOW.defaultValue);
      this.configMap.set(CONFIG_BGCOLOR.key, CONFIG_BGCOLOR.defaultValue);
      this.configMap.set(CONFIG_FONT_SIZE.key, CONFIG_FONT_SIZE.defaultValue);
      this.configMap.set(CONFIG_FONT_COLOR.key, CONFIG_FONT_COLOR.defaultValue);
      this.configMap.set(CONFIG_TEXT_SPEED.key, CONFIG_TEXT_SPEED.defaultValue);
  
      //this.next();
      console.log('ElemManager() success');
    }catch(error){
      if(this.mainScene != null ){
        this.mainScene.showError('ElemManager()', error);
      }
    }
  },
  
  pushNext: function(){
    if(this.pushable){
      this.next();
    }
  },
  
  reset: function(flag){
      console.log('ElemManager#reset()');
    if(this.mainScene != null){
      this.mainScene.spriteMap.forEach(function (value, key) {
        value.remove();
      });
      this.mainScene.updateText('');
      this.mainScene.updateTalker(null);
      this.mainScene.updateName(null);
    }
    // すべてのtalkerを解除する
    this.talkerMap.clear();
    this.gotoFlag = flag;
    this.index=0;
    this.next();
  },

  goto: function(flag){
    this.gotoFlag = flag;
  },

  next: function(){
    this.setNext();
    while(this.nextFlag){
      this.nextImpl();
    }
  },
  
  setNext: function(){
    this.nextFlag = true;
  },

  nextImpl: function(){
    var line = null;
    this.nextFlag = false;
    try{
      this.pushable = false;
  
      if( this.index >= this.lines.length ){
        // out of array
        console.log('ElemManager::next() out of array.');
        this.gotoFlag = null;
        /*
        this.index=0;
        this.next(scene);
        scene.spriteMap.forEach(function (value, key) {
          value.remove();
        });
        */
        return;
      }
  
      var line = this.lines[this.index];
      this.index++;
      //console.log(line);
  
      if(line.trim().length===0){
        // empty line
        console.log('ElemManager::next() empty line.');
        this.setNext();
        return;
      }
  
      if(this.gotoFlag != null){
        // now goto
        var splited = line.split(';');
        if(splited[0] == '@flag'){
          // 従来処理へ進む
          //this.currentElem = ElemFlag(splited);
          //this.currentElem.doAction(this.mainScene,this);
          //return;
        }else if(splited[0] == '@endif'){
          // 従来処理へ進む
        }else{
          // 次へ進む
          this.setNext();
          return;
        }
      }
  
      if(line[0] == '@' ){
        var splited = line.split(';');
        this.currentElem = null;
         if(splited[0] == '@img'){
          this.currentElem = ElemImage(splited);
        }else if(splited[0] == '@asset'){
          this.currentElem = ElemAsset(splited);
        }else if(splited[0] == '@flag'){
          this.currentElem = ElemFlag(splited);
        }else if(splited[0] == '@goto'){
          this.currentElem = ElemGoto(splited);
        }else if(splited[0] == '@select'){
          this.currentElem = ElemSelect(splited);
        }else if(splited[0] == '@text'){
          this.currentElem = ElemText(splited);
        }else if(splited[0] == '@pause'){
          this.currentElem = ElemPause(splited);
        }else if(splited[0] == '@talker'){
          this.currentElem = ElemTalker(splited);
        }else if(splited[0] == '@config'){
          this.currentElem = ElemConfig(splited);
        }else if(splited[0] == '@title'){
          this.currentElem = ElemTitle(splited);
        }else if(splited[0] == '@chapter'){
          this.currentElem = ElemChapter(splited);
        }else if(splited[0] == '@param'){
          this.currentElem = ElemParam(splited);
        }else if(splited[0] == '@endif'){
          var l2 = '@flag;id:@endif';
          this.currentElem = ElemFlag(l2.split(';'));
        }else if(splited[0] == '@ifgoto'){
          this.currentElem = ElemIfGoto(splited);
        }else{
          // undefined
          console.log('ElemManager::next() undefined type ('+ splited[0] +')');
          this.currentElem = null;
          this.setNext();
        }
      }else{
        // Pureテキスト
        this.currentElem = ElemTextPlain(line);
      }
      if( this.currentElem != null){
        this.currentElem.doAction(this.mainScene,this);
      }
    }catch(error){
      if(this.mainScene != null ){
        this.mainScene.showError(line, error);
      }
    }

  },
  
});

/**
 * 要素オブジェクトの基本クラス
*/
phina.define( 'ElemBase', {
  init: function(splited){
    this.elemMap = new Map();
    for( var content of splited ){
      if(content.length === 0){
        continue;
      }
      var elems = content.split(':');
      var key = elems[0].trim();
      var value = elems[1];
      if( value != null){
        // 値がある
        value = value.trim();
        this.elemMap.set(key,value);
      }
    }
  },
  
  doAction: function(scene,elemMan){
    throw Exception("not support.");
  },
});

/**
 * text
 */
phina.define( 'ElemTextPlain', {
  superClass: 'ElemBase',
  init: function(line){
    //this.superInit(splited);
    this.talkerid=null;
    if(line[0]=="\""){
      this.text = line.substr(1);
    }else if(line[0]=='['){
      var last = line.indexOf(']');
      if(last==1){
        // talker解除
        this.talkerid = '';
        this.text = line.substr(last+1);
      }else if(last > 1){
        this.talkerid = line.substr(1, last-1);
        this.text = line.substr(last+1);
      }else{
        this.text = line;
      }
    }else{
      this.text = line;
    }
  },

  doAction: function(scene,elemMan){
    scene.updateText(this.text);

    if(this.talkerid != null){
      // talker指定あり
      if(this.talkerid.length == 0){
        scene.updateTalker(null);
        scene.updateName(null);
      }else{
        var talker = elemMan.talkerMap.get(this.talkerid);
        if(talker == null){
          talker = Talker(this.talkerid);
          elemMan.talkerMap.set(this.talkerid, talker);
        }
        scene.updateTalker(talker.imgid);
        scene.updateName(talker.name);
      }
    }

    elemMan.pushable = true;
  },
  
})

/**
 * text
 */
phina.define( 'ElemText', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.text = this.elemMap.get('text');
    this.textnext = this.elemMap.get('next');
    if(this.text == null && this.textnext == null){
      // textがない場合は自動送り
      this.textnext = 'auto';
    }
    this.name = this.elemMap.get('name');
    this.color = this.elemMap.get('color');
    this.size = this.elemMap.get('size');
    this.alpha = this.elemMap.get('alpha');
    this.imgid = this.elemMap.get('imgid');
    this.speed = this.elemMap.get('speed');
    this.talkerid = this.elemMap.get('talker');
    console.log('ElemText : ' + splited);
  },

  doAction: function(scene,elemMan){
    if(this.color != null){
      elemMan.tempTextColor = this.color;
    }
    if(this.speed != null){
      elemMan.tempTextSpeed = this.speed;
    }
    if(this.size != null){
      elemMan.tempTextSize = this.size;
    }
    if(this.talkerid != null){
      // talker指定あり
      var talker = elemMan.talkerMap.get(this.talkerid);
      if(talker == null){
        talker = Talker(this.talkerid);
        elemMan.talkerMap.set(this.talkerid, talker);
      }
      this.name = talker.name;
      this.imgid = talker.imgid;
      scene.updateTalker(this.imgid);
    }
    scene.updateName(this.name);
    if(this.text != null){
      scene.updateText(this.text);
    }
    elemMan.pushable = true;
  },
})


phina.define( 'Talker', {
  init:function(id){
    this.id = id;
    this.name = null;
    this.imgid = null;
  }
})

/**
 * @talker;id:manB;name:助手;imgid:@left\r\n\
 */
phina.define( 'ElemTalker', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.id = this.elemMap.get('id');
    this.name = this.elemMap.get('name');
    this.imgid = this.elemMap.get('imgid');
  },

  doAction: function(scene,elemMan){
    var talker = elemMan.talkerMap.get(this.id);
    if(talker == null){
      talker = Talker(this.id);
      elemMan.talkerMap.set(this.id, talker);
    }
    if( this.name != null ){
      talker.name = this.name;
    }
    if(this.imgid != null){
      talker.imgid = this.imgid;
    }
    console.log('['+elemMan.index+']ElemTalker : id='+this.id+', name=' + this.name);
    elemMan.setNext();
  },
})

/**
 * text
 */
phina.define( 'ElemConfig', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.key = this.elemMap.get('key');
    this.value = this.elemMap.get('value');
  },

  doAction: function(scene,elemMan){
    console.log('ElemConfig set : ' + this.key + ' = ' + this.value);
    elemMan.configMap.set(this.key,this.value);
    if( this.key == CONFIG_BGCOLOR){
      scene.backgroundColor = this.value;
    }else if(this.key == CONFIG_FONT_SIZE.key){
      if(this.value != null){
        scene.textArea.fontSize = this.value;
      }else{
        scene.textArea.fontSize = CONFIG_FONT_SIZE.defaultValue;
      }
    }else if(this.key == CONFIG_FONT_COLOR.key){
      if(this.value != null){
        scene.textArea.fill = this.value;
      }else{
        scene.textArea.fill = CONFIG_FONT_COLOR.defaultValue;
      }
    }else if(this.key == CONFIG_TEXT_SPEED.key){
      if(this.value != null){
        scene.textTimerInterval = this.value;
      }else{
        scene.textTimerInterval = CONFIG_TEXT_SPEED.defaultValue;
      }
    }
    
    elemMan.setNext();
  },
})

/**
 * pause
 */
phina.define( 'ElemPause', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.intarval = parseInt(this.elemMap.get('time'));
  },

  doAction: function(scene,elemMan){
    console.log('ElemPause::Start');
    setTimeout(function() {
      console.log('ElemPause::End');
      elemMan.next();
    }, this.intarval);
  },
})

/**
 * Title
 * @title;main:タイトル;sub:サブタイトル
 */
phina.define( 'ElemTitle', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.maintitle = this.elemMap.get('main');
    this.subtitle = this.elemMap.get('sub');
  },

  doAction: function(scene,elemMan){
    console.log('ElemTitle('+this.maintitle+','+this.subtitle+')');
    // シーンをpushする
    var titleScene = TitleScene();
    scene.app.pushScene(titleScene);
    titleScene.mainTitleArea.text = this.maintitle;
    titleScene.subTitleArea.text = this.subtitle;
  },
})


phina.define( 'ElemImage', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);

    this.id = this.elemMap.get('id');
    this.position = this.elemMap.get('position');
    this.name = this.elemMap.get('name');
    this.mirror = this.elemMap.get('mirror');
    var scale = this.elemMap.get('scale');
    var rotate = this.elemMap.get('rotate');
    if(this.id == null){
        if(this.position == 'right'){
          this.id = '@right';
        }else if(this.position == 'left'){
          this.id = '@left';
        }else if(this.position == 'center'){
          this.id = '@center';
        }else if(this.position == 'bg'){
          this.id = '@bg';
        }
    }

    this.removeflag = false;
    if(this.id != null){
      if( this.name == null && this.position == null && this.scale == null){
        this.removeflag = true;
      }
    }

    if(scale != null){
      this.scale = parseFloat(scale);
    }
    if(rotate != null){
      this.rotate = parseFloat(rotate);
    }
    if(this.mirror == null){
      if(this.id == '@right'){
        this.mirror = 'x';
      }
    }

    console.log('ElemImage():id='+this.id+',name='+this.name+',position='+this.position);
  },

  doAction: function(scene,elemMan){
    //@img;position:left;name:manB1;scale:1.5\r\n\
    //@img;position:right;name:manA1;scale:1.5\r\n\
    //@img;id:@right;position:+500,200\r\n\
    if( this.id == null){
      // id指定なし
      console.error('ElemImage no id.');
      elemMan.setNext();
      return;
    }
    
    if(this.removeflag){
      // remove image
      console.log('ElemImage : remove('+this.id+')');
      if(scene.spriteMap.get(this.id) != null){
        scene.spriteMap.get(this.id).remove();
        scene.spriteMap.delete(this.id);
      }
      elemMan.setNext();
      return;
    }

    var sprite = null;
    if(this.name != null){
      // name指定がある場合はロードする
      sprite = Sprite(this.name);
      scene.updateSprite(this.id,sprite);
      console.log('ElemImage : create('+this.id+')');
    }else{
      // name指定がない場合はIDから取得
      sprite = scene.spriteMap.get(this.id);
      console.log('ElemImage : load('+this.id+')');
    }
    if(sprite==null){
      console.error('ElemImage no sprite.');
      elemMan.setNext();
      return;
    }

    // show Image
    if(this.id == '@bg'){
      // back ground
      scene.updateSprite(this.id,sprite);
      
      sprite.addChildTo(scene.bgGroup);
      sprite.setOrigin(0.5,0.5);
      sprite.setPosition(scene.gridX.center(), scene.gridY.center());
      sprite.setScale(this.scale);
    }else{
      //sprite = Sprite(this.name);
      sprite.addChildTo(scene.spriteGroup);
      sprite.setOrigin(0.5,1.0);
      sprite.setScale(1.0);
      if(this.id == '@right'){
        //scene.updateSprite(this.id,sprite);
        sprite.setPosition(scene.gridX.center()+160, MESSAGE_AREA_Y-1);
      }else if(this.id == '@left'){
        //scene.updateSprite(this.id,sprite);
        sprite.setPosition(scene.gridX.center()-160, MESSAGE_AREA_Y-1);
      }else if(this.id == '@center'){
        //scene.updateSprite(this.id,sprite);
        sprite.setPosition(scene.gridX.center(), MESSAGE_AREA_Y-1);
      }
    }

    if(this.position != null){
      var pos = this.position.split(',');
      var x = parseInt(pos[0]);
      var y = parseInt(pos[1]);
      console.log('['+elemMan.index+']ElemImage('+this.id+') : set position('+x+','+y+')');
      if(!isNaN(x)){
        if(isNaN(y)){
          sprite.setPosition(scene.gridX.center() + x, MESSAGE_AREA_Y);
        }else{
          sprite.setPosition(scene.gridX.center() + x, MESSAGE_AREA_Y+y);
        }
      }
    }
    
    if(this.scale != null){
      console.log('['+elemMan.index+']ElemImage('+this.id+') : set scale('+this.scale+')');
      sprite.setScale(this.scale);
    }
    if(this.rotate != null){
      console.log('['+elemMan.index+']ElemImage('+this.id+') : set rotate('+this.rotate+')');
      sprite.setRotation(this.rotate);
    }
    if(this.mirror == 'x'){
      console.log('['+elemMan.index+']ElemImage('+this.id+') : mirror = x');
      sprite.scaleX *= -1;
    }

    elemMan.setNext();
  },
});


phina.define( 'ElemAsset', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.id = parseInt(this.elemMap.get('id'));
    
  },

  doAction: function(scene,elemMan){
    // load asset
    if(elemMan.loadedAsset == this.id){
      console.log('ElemAsset()::load asset['+this.id+'] is already loaded.');
      elemMan.setNext();
      return;
    }
    console.log('ElemAsset()::load['+this.id+'] start');
    var loader = phina.asset.AssetLoader();
    var elem = this;
    loader.load(ASSETS[this.id]);
    loader.on('load', function(){
      console.log('ElemAsset()::load['+elem.id+'] end');
      elemMan.loadedAsset = elem.id;
      elemMan.next();
    });
  },
})

phina.define( 'ElemFlag', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.id = this.elemMap.get('id');
    console.log('ElemFlag() success('+this.id+')');
  },

  doAction: function(scene,elemMan){
    if( this.id == elemMan.gotoFlag ){
      elemMan.gotoFlag = null;
    }
    elemMan.setNext();
  },
})

phina.define( 'ElemGoto', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.id = this.elemMap.get('id');
    console.log('ElemGoto() success('+this.id+')');
  },

  doAction: function(scene,elemMan){
    elemMan.goto(this.id);
    elemMan.setNext();
  },
})

// @ifgoto;param:p1;cond:<10;then:if1;else:if2
phina.define( 'ElemIfGoto', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.param = this.elemMap.get('param');
    this.cond = this.elemMap.get('cond');
    this.gotoThen = this.elemMap.get('then');
    this.gotoElse = this.elemMap.get('else');
  },

  doAction: function(scene,elemMan){
    // 未実装
    if(true){
      elemMan.goto(this.gotoThen);
    }else{
      elemMan.goto(this.gotoElse);
    }
    elemMan.setNext();
  },
})

phina.define( 'ElemChapter', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.flag = this.elemMap.get('flag');
    this.text = this.elemMap.get('text');
    console.log('ElemChapter() success('+this.flag+'), ' + this.text);
  },

  doAction: function(scene,elemMan){
    elemMan.chapterMap.set(elemMan.index, this);
    elemMan.setNext();
  },
})

phina.define( 'ElemParam', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.name = this.elemMap.get('name');
    this.value = this.elemMap.get('value');
    //console.log('ElemParam() success('+this.name+'=' + this.value);
  },

  doAction: function(scene,elemMan){
    if(this.value == null){
      // 要素削除
      elemMan.variableMap.delete(this.name);
    }else if( this.value[0] == '='){
      // 代入
      elemMan.variableMap.set(this.name,this.value.substr(1));
    }else if( this.value[0] == '+' || this.value[0] == '&'){
      var current = elemMan.variableMap.get(this.name);
      var temp;
      if(current == null){
        temp = this.value.substr(1);
      }else{
        if(this.value[0] == '&'){
          temp = current + this.value.substr(1);
        }else{
          temp = parseInt(current) + parseInt(this.value.substr(1));
        }
      }
      elemMan.variableMap.set(this.name,temp);
    }else if( this.value[0] == '-'){
      var current = elemMan.variableMap.get(this.name);
      var temp;
      if(current == null){
        temp = this.value;
      }else{
        temp = parseInt(current) + parseInt(this.value);
      }
      elemMan.variableMap.set(this.name,temp);
    }else{
      // 代入
      elemMan.variableMap.set(this.name,this.value);
    }
    console.log('ElemParam() success('+this.name+','+this.value+')=' + elemMan.variableMap.get(this.name));
    elemMan.setNext();
  },
});

phina.define( 'ElemSelect', {
  superClass: 'ElemBase',
  init: function(splited){
    this.superInit(splited);
    this.text = this.elemMap.get('text');
    this.flag = this.elemMap.get('flag');
    this.btn = null;
    console.log('ElemSelect() success('+this.flag+') : ' + this.text);
  },

  doAction: function(scene,elemMan){
    if(this.flag != null){
      // add select
      
      this.label = Label({
        text:this.text,
        width: scene.width-20,
        fill:'#FFF',
        stroke:'#000',
        strokeWidth:6,
        padding:0,
        fontsize: CONFIG_FONT_SIZE.defaultValue,
      });

      this.btn = Button({
        text: '',
        width: this.label.width,
        height: this.label.height,
      });
      this.btn.alpha = 0.7;
      
      var elem = this;
      this.btn.onpush = (function(){
        // remove all button
        var count = elemMan.selectArray.length;
        for( var i=0 ; i < count ; i++ ){
          elemMan.selectArray[i].btn.remove();
          elemMan.selectArray[i].label.remove();
        }
        elemMan.selectArray = [];

        elemMan.goto(elem.flag);
        elemMan.next();
      });
      elemMan.selectArray.push(this);
      elemMan.setNext();
      return;
    }else{
      // show select
      var count = elemMan.selectArray.length;
      for( var i=0 ; i < count ; i++ ){
        elemMan.selectArray[i].btn.addChildTo(scene.uiGroup);
        elemMan.selectArray[i].label.addChildTo(scene.uiGroup);
        elemMan.selectArray[i].label.setPosition(scene.gridX.center(),scene.gridY.center() - (count-i-1) * 100 );
        elemMan.selectArray[i].btn.setPosition(elemMan.selectArray[i].label.x, elemMan.selectArray[i].label.y);
      }
      if( this.text != null ){
        scene.updateText(this.text);
      }
    }
  },
})

phina.main(function(){
  var app = GameApp({
    startLabel: 'main',
  });
  app.run();
});

[[/code]]
--]

[!-- code 2 --]
[!--
[[code type="html"]]
<html>
  <head>
　<meta charset='utf-8' />
   <meta name="viewport" content="width=device-width, user-scalable=no" />
   <meta name="apple-mobile-web-app-capable" content="yes" />

   <!-- このURLは変えないでください -->
   <script src='http://cdn.rawgit.com/phi-jp/phina.js/v0.2.0/build/phina.min.js'></script>

   <!-- ここにこのページの2番目のCodeブロックのURLを入れてください -->
   <!-- これは構文ページなので+1してます -->
   <script src='http://scp-jp.wikidot.com/author:dr-toraya/code/3'></script>

   <!-- このURLは変えないでください -->
   <script src='http://scp-jp.wikidot.com/author:dr-toraya/code/1'></script>

   <!-- スタイルシートはご自由にどうぞ -->
  <style type="text/css">
@import url(http://scp-jp.wdfiles.com/local--files/japanese-syntax/scp-WikidotCss.css);

body {
  padding:0px;
  margin: 0px;
  color: #FFFFFF;
  background-color: #1a1a1a;
}
  </style>
</head>
<body>
<div id="page-content">
</div>
</body>
</html>
[[/code]]
--]

[!-- code 4--]
[!--
[[code type="javascript"]]

// この変数このページに対応するCodeの3番目のURL(シナリオのCode)を入れます。
// なぜだか絶対パス(httpで始まるパス)だとうまくいかないみたいです。
// 解決策を見つけたら教えてください。
// これは構文ページなので+1してます
let texturl='/author:dr-toraya/code/4';

// この変数に読み込む画像のURLを記載します。
// 配列で分けているのは、シーンごとに必要な画像セットを切り分けるためです。
let ASSETS = [
  {
    image: {
      'bg1'  : 'http://scp-jp.wikidot.com/local--files/novelgamenekocook/castle.jpg',
      'test1': 'http://scp-jp.wikidot.com/local--files/novelgamenekocook/manA1.png',
      'test2': 'http://scp-jp.wikidot.com/local--files/novelgamenekocook/manB2.png',
    },
  },
];
[[/code]]
--]

[!-- code 5 --]
[!--
[[code type="javascript"]]
@asset;id:0
@chapter;flag:チャプター1;text:チャプター1;
@chapter;flag:チャプター2;text:チャプター2;
@title;main:サンプル;sub:ノベルゲー構文利用例
@flag;id:チャプター1
@img;name:bg1;position:bg;scale:2
背景画像を表示しました。
@talker;id:キャラ1;name:キャラ1名;imgid:@right
@talker;id:キャラ2;name:キャラ2名;imgid:@left
@img;position:right;name:test1;scale:1.5
[キャラ1]右側に画像表示。idには「@right」が使用されます。
@img;position:left;name:test2;scale:1.5
[キャラ2]左側にも画像表示。idには「@left」が使用されます。
改行すると次のページになりますがアクティブなキャラクタは引き継がれます。
@text;talker:キャラ1;text:大きく赤文字で！;size:64;color:#F00;speed:200
@text;text:talkerがない@textを指定するとキャラ指定が解除されます。
@text;talker:キャラ1;text:または(これは小さく緑文字で）;size:24;color:rgba(0,255,0,1)
[]先頭が[]の行を指定するとキャラ指定が解除されます。
@text;next:auto;text:選択肢を表示
@select;text:選択肢1;flag:1
@select;text:選択肢2;flag:2
@select;text:選択肢3;flag:3
@select;
@flag;id:1
これは選択肢1の文章
@goto;id:next
@flag;id:2
これは選択肢2の文章
@goto;id:next
@flag;id:3
これは選択肢3の文章
@goto;id:next
@flag;id:next
@img;id:@right
@img;id:@left
@img;id:@bg
@flag;id:チャプター2
ここからチャプター2
これでおしまい。
[[/CODE]]
--]

[!-- code 6 --]
[!--
[[code]]
[[iframe <ここにhttp://で始まるページのURL>/code/1 width="100%" height="500px"  scrolling="no"]]

[!-- 1つ目のコードブロック、HTMLを記載する --]
[!--
[[code type="html"]]
<html>
  <head>
　<meta charset='utf-8' />
   <meta name="viewport" content="width=device-width, user-scalable=no" />
   <meta name="apple-mobile-web-app-capable" content="yes" />

   <!-- このURLは変えないでください -->
   <script src='http://cdn.rawgit.com/phi-jp/phina.js/v0.2.0/build/phina.min.js'></script>

   <!-- ここにこのページの2番目のCodeブロックのURLを入れてください -->
   <script src='http://scp-jp.wikidot.com/<ここにページ名>/code/2'></script>

   <!-- このURLは変えないでください -->
   <script src='http://scp-jp.wikidot.com/author:dr-toraya/code/1'></script>

<!-- サンドボックスの場合は上をコメントアウトして次を記載してください -->

<!-- 
   <script src='http://scp-jp-sandbox3.wdfiles.com/local--code/draft%3A1869219-34-0fe4/1'></script>
-->

   <!-- スタイルシートはご自由にどうぞ -->
  <style type="text/css">
@import url(http://scp-jp.wdfiles.com/local--files/japanese-syntax/scp-WikidotCss.css);

body {
  padding:0px;
  margin: 0px;
  color: #FFFFFF;
  background-color: #1a1a1a;
}
  </style>
</head>
<body>
<div id="page-content">
</div>
</body>
</html>
[[/code]]
--]

[!-- 2つ目のコードブロック、javascriptを記載する --]

[!--
[[code type="javascript"]]

// この変数このページに対応するCodeの3番目のURL(シナリオのCode)を入れます。
// なぜだか絶対パス(httpで始まるパス)だとうまくいかないみたいです。
// 解決策を見つけたら教えてください。
let texturl='/<ここにページ名>/code/3';

// この変数に読み込む画像のURLを記載します。
// 配列で分けているのは、シーンごとに必要な画像セットを切り分けるためです。
let ASSETS = [
  {
    image: {
      '画像ID1'  : 'ここに画像URL（フルパス指定可）',
      '画像ID2'  : '必要な数だけ記載してください。',
    },
  },
];
[[/code]]

[!-- 3つ目のコードブロック、シナリオを記載する --]
[!--
[[code type="javascript"]]
@asset;id:0
@chapter;flag:チャプター1;text:チャプター1;
@chapter;flag:チャプター2;text:チャプター2;
@title;main:サンプル;sub:ノベルゲー構文利用例
@flag;id:チャプター1
@img;name:bg1;position:bg;scale:2
背景画像を表示しました。
@talker;id:キャラ1;name:キャラ1名;imgid:@right
@talker;id:キャラ2;name:キャラ2名;imgid:@left
@img;position:right;name:test1;scale:1.5
[キャラ1]右側に画像表示。idには「@right」が使用されます。
@img;position:left;name:test2;scale:1.5
[キャラ2]左側にも画像表示。idには「@left」が使用されます。
改行すると次のページになりますがアクティブなキャラクタは引き継がれます。
@text;talker:キャラ1;text:大きく赤文字で！;size:64;color:#F00;speed:200
@text;text:talkerがない@textを指定するとキャラ指定が解除されます。
@text;talker:キャラ1;text:または;size:24;color:#0F0
[]先頭が[]の行を指定するとキャラ指定が解除されます。
@text;next:auto;text:選択肢を表示
@select;text:選択肢1;flag:1
@select;text:選択肢2;flag:2
@select;text:選択肢3;flag:3
@select;
@flag;id:1
これは選択肢1の文章
@goto;id:next
@flag;id:2
これは選択肢2の文章
@goto;id:next
@flag;id:3
これは選択肢3の文章
@goto;id:next
@flag;id:next
@img;id:@right
@img;id:@left
@img;id:@bg
@flag;id:チャプター2
ここからチャプター2
これでおしまい。
[[/CODE]]
--]

[[/code]]
--]
[!-- ここまでコピペ用コード --]